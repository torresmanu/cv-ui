{"version":3,"sources":["pages/pages/Dashboard/NewsSection.js","pages/pages/Dashboard/Carousel.js","pages/pages/Dashboard/GradientLineChart.js","pages/pages/Dashboard/LinePlotChart.js","pages/pages/Dashboard/CandlePlotChart.js","pages/pages/Dashboard/ChartsContainer.js","pages/pages/Dashboard/TokenToolbar.js","../node_modules/@material-ui/core/esm/LinearProgress/LinearProgress.js","pages/pages/Dashboard/FearGreedIndicator.js","pages/pages/Dashboard/TopGainers.js","pages/pages/Dashboard/Dashboard.js","pages/pages/Dashboard/index.js"],"names":["NewsCard","_ref","imageUrl","title","description","newsLink","handleNext","handlePrevious","React","createElement","Card","className","IconButton","onClick","ArrowBackIos","style","color","CardContent","Grid","container","spacing","item","md","xs","src","alt","Typography","variant","gutterBottom","length","slice","Button","window","open","ArrowForwardIos","NewsSection","dispatch","useDispatch","data","newsData","status","error","useSelector","state","news","currentIndex","setCurrentIndex","useState","useEffect","fetchCryptoNews","CircularProgress","prevIndex","scrollAnimation","keyframes","CarouselContainer","styled","div","CarouselContent","duration","NewsItem","img","Carousel","newsArticles","cryptoNews","carouselContentRef","useRef","isMobile","useMediaQuery","animationDuration","setAnimationDuration","current","calculatedDuration","scrollWidth","parentElement","offsetWidth","Math","max","ref","map","article","index","Tooltip","key","username","arrow","placement","href","target","rel","textDecoration","text","ChartJS","register","LineElement","PointElement","LinearScale","CategoryScale","Filler","Title","Legend","zoomPlugin","GradientLineChart","selectedToken","tokenDictioanry","tokenData","tokens","theme","useTheme","isMdUp","breakpoints","up","groupByDay","setGroupByDay","height","width","Box","sx","display","justifyContent","marginBottom","str","charAt","toUpperCase","toLowerCase","CustomSwitch","Line","canvas","gradient","getContext","createLinearGradient","addColorStop","dataToPlot","groupedData","forEach","entry","dateKey","date","toISOString","split","totalRealPrice","count","realPrice","Object","entries","_ref2","Date","avgRealPrice","groupByDayAndAverage","labels","Intl","DateTimeFormat","day","month","format","datasets","label","fill","backgroundColor","borderColor","pointRadius","tension","options","responsive","maintainAspectRatio","scales","y","ticks","callback","value","toFixed","grid","x","maxTicksLimit","maxRotation","minRotation","plugins","zoom","pan","enabled","mode","drag","LinePlotChart","CandlePlotChart","tokenDictionary","bitcoin","ethereum","cardano","litecoin","binancecoin","polygon","solana","processedData","reduce","acc","point","dayKey","high","low","min","close","prepareChartData","Plot","type","name","increasing","line","decreasing","layout","xaxis","gridcolor","titlefont","tickfont","showgrid","yaxis","font","standoff","tickcolor","ticklen","tickwidth","margin","t","r","l","b","autosize","paper_bgcolor","plot_bgcolor","useResizeHandler","config","modeBarButtonsToRemove","displaylogo","ChartsContainer","Fragment","tokenImages","BTC","ETH","ethImage","ADA","adaImage","LTC","BNB","tokenMap","TokenToolbar","onTokenChange","availableTokens","keys","marginTop","token","find","getKeyByValue","borderRadius","align","marginLeft","marginRight","LinearProgress","props","classes","_props$color","valueBuffer","_props$variant","other","_objectWithoutProperties","rootProps","inlineStyles","bar1","bar2","undefined","round","transform","direction","concat","process","_transform","_extends","clsx","root","capitalize","determinate","indeterminate","buffer","query","role","dashed","bar","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer","withStyles","getColor","palette","lighten","darken","backgroundPrimary","primary","main","backgroundSecondary","secondary","position","overflow","colorAdjust","colorPrimary","colorSecondary","animation","dashedColorPrimary","backgroundImage","backgroundSize","backgroundPosition","dashedColorSecondary","left","bottom","top","transition","transformOrigin","barColorPrimary","barColorSecondary","zIndex","right","opacity","FearGreedIndicator","sentimentData","sentiment","fetchSentimentData","latestData","alignItems","Icon","icon","sadFaceIcon","emoticonHappyOutline","fontWeight","fontSize","classification","useStyles","makeStyles","card","padding","header","coinRow","coinInfo","flex","coinLogo","coinName","priceColumn","textAlign","changeColumn","TopGainersCard","topGainers","fetchTopGainers","coin","id","Avatar","image","symbol","price","toLocaleString","parseFloat","change","flexGrow","buttonContainer","gap","Dashboard","historicalData","setSelectedToken","favoriteTokens","setFavoriteTokens","openAlertModal","setOpenAlertModal","fetchAllHistoricalData","handleOpenAlertModal","downloadCSV","console","log","csvData","join","blob","Blob","url","URL","createObjectURL","link","document","setAttribute","body","appendChild","click","removeChild","handleFavoriteToggle","prev","includes","filter","boxShadow","disabled","Star","startIcon","NotificationsIcon","GetAppIcon","border","FramerCard","Dialog","onClose","handleCloseAlertModal","fullWidth","maxWidth","PaperProps","background","DialogContent","Database","appliedFilters","accessDenied","filters","resultCount","setResultCount","evaluationsData","setEvaluationsData","subjectsData","setSubjectsData","resultsLoading","setResultsLoading","searchFilters","setSearchFilters","AccessDenied","evaluations","subjects","handleCopyFilters","copyJSONToClipboard"],"mappings":"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","file":"static/js/18.3c746512.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCryptoNews } from '../../../redux/store/newsSlice';\nimport { Grid, Card, CardContent, Typography, Button, IconButton, CircularProgress } from '@material-ui/core';\nimport { ArrowBackIos, ArrowForwardIos } from '@material-ui/icons';\nimport '../../../App.css';\n\nconst NewsCard = ({ imageUrl, title, description, newsLink, handleNext, handlePrevious }) => {\n  return (\n    <Card className=\"news-card\">\n      <IconButton onClick={handlePrevious} className=\"news-arrows news-arrow-left\">\n        <ArrowBackIos style={{ color: 'white' }} />\n      </IconButton>\n\n      <CardContent>\n        <Grid container spacing={5} className=\"news-card-content\">\n          <Grid item md={4} xs={12}>\n            <img src={imageUrl} alt={title} className=\"news-image\" />\n          </Grid>\n          <Grid item md={6} xs={12}>\n            <Typography variant=\"h6\" gutterBottom>\n              {title}\n            </Typography>\n            <Typography variant=\"body2\" className=\"news-description\">\n              {description.length > 350 ? `${description.slice(0, 350)}...` : description}\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              onClick={() => window.open(newsLink, '_blank', 'noopener,noreferrer')}\n              className=\"news-button\"\n            >\n              Read More\n            </Button>\n          </Grid>\n        </Grid>\n      </CardContent>\n\n      <IconButton onClick={handleNext} className=\"news-arrows news-arrow-right\">\n        <ArrowForwardIos style={{ color: 'white' }} />\n      </IconButton>\n    </Card>\n  );\n};\n\nconst NewsSection = () => {\n  const dispatch = useDispatch();\n  const { data: newsData, status, error } = useSelector((state) => state.news);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchCryptoNews());\n    }\n  }, [dispatch, status]);\n\n  const handleNext = () => setCurrentIndex((prevIndex) => (prevIndex + 1) % newsData.length);\n  const handlePrevious = () => setCurrentIndex((prevIndex) => (prevIndex === 0 ? newsData.length - 1 : prevIndex - 1));\n\n  if (status === 'loading') return <div className=\"loading-spinner\"><CircularProgress /></div>;\n  if (status === 'failed') return <Typography className=\"error-message\">Error loading news: {error}</Typography>;\n  if (!newsData.length) return <Typography className=\"error-message\">No news available.</Typography>;\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <NewsCard\n          imageUrl={newsData[currentIndex].imageUrl}\n          title={newsData[currentIndex].title}\n          description={newsData[currentIndex].description}\n          newsLink={newsData[currentIndex].newsLink}\n          handleNext={handleNext}\n          handlePrevious={handlePrevious}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default NewsSection;","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCryptoNews } from '../../../redux/store/binanceNewsSlice';\nimport styled, { keyframes } from 'styled-components';\nimport { Tooltip, CircularProgress, Typography, useMediaQuery } from '@material-ui/core';\n\nconst scrollAnimation = keyframes`\n  0% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(-100%);\n  }\n`;\n\nconst CarouselContainer = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  background: rgba(255, 255, 255, 0);\n  backdrop-filter: blur(10px);\n  position: relative;\n  margin-bottom: 30px;\n`;\n\nconst CarouselContent = styled.div`\n  display: inline-block;\n  padding: 10px 0;\n  animation: ${scrollAnimation} ${({ duration }) => duration}s linear infinite;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst NewsItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 50px;\n  color: white;\n`;\n\nconst Avatar = styled.img`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n`;\n\nconst Carousel = () => {\n  const dispatch = useDispatch();\n  const { data: newsArticles, status, error } = useSelector((state) => state.cryptoNews);\n  const carouselContentRef = useRef(null);\n  const isMobile = useMediaQuery('(max-width: 600px)');\n  const [animationDuration, setAnimationDuration] = useState(30); // Default duration\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchCryptoNews());\n    }\n  }, [dispatch, status]);\n\n  useEffect(() => {\n    if (carouselContentRef.current && newsArticles.length > 0) {\n      const contentWidth = carouselContentRef.current.scrollWidth;\n      const viewportWidth = carouselContentRef.current.parentElement.offsetWidth;\n      const speedPerPixel = isMobile ? 0.02 : 0.05; // Increase speed on mobile\n      let calculatedDuration = (contentWidth / viewportWidth) * speedPerPixel;\n\n      if (isMobile) {\n        calculatedDuration = Math.max(15, calculatedDuration); // Ensure it's fast enough on mobile\n      } else {\n        calculatedDuration = Math.max(30, calculatedDuration); // Ensure minimum duration on desktop\n      }\n\n      setAnimationDuration(calculatedDuration);\n    }\n  }, [newsArticles, isMobile]);\n\n  if (status === 'loading') return <CircularProgress />;\n  if (status === 'failed') return <Typography color=\"error\">Error loading news: {error}</Typography>;\n  if (!newsArticles.length) return <Typography>No news available.</Typography>;\n\n  return (\n    <CarouselContainer>\n      <CarouselContent ref={carouselContentRef} duration={animationDuration}>\n        {[...newsArticles, ...newsArticles].map((article, index) => (\n          <Tooltip key={index} title={`Read on ${article.username}`} arrow placement=\"top\">\n            <a \n              href={article.newsLink} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\" \n              style={{ textDecoration: 'none', color: 'inherit' }}\n            >\n              <NewsItem>\n                <span>\n                  <strong>{article.username}</strong>: {article.text.slice(0, 100)}...\n                </span>\n              </NewsItem>\n            </a>\n          </Tooltip>\n        ))}\n      </CarouselContent>\n    </CarouselContainer>\n  );\n};\n\nexport default Carousel;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Chart as ChartJS,\n  LineElement,\n  PointElement,\n  LinearScale,\n  CategoryScale,\n  Filler,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport { Box, Typography } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport CustomSwitch from '../../components/CustomSwitch';\n\n// Register necessary components for Chart.js\nChartJS.register(LineElement, PointElement, LinearScale, CategoryScale, Filler, Title, Tooltip, Legend, zoomPlugin);\n\nconst GradientLineChart = ({ selectedToken }) => {\nconst tokenDictioanry = {\n  'bitcoin': 'BTC',\n  'ethereum': 'ETH',\n  'cardano': 'ADA',\n  'litecoin': 'LTC',\n  'binancecoin': 'BNB',\n  'polygon': 'MATIC',\n  'solana': 'SOL',\n};\n\n  const tokenData = useSelector((state) => state.tokens.data[tokenDictioanry[selectedToken]]);\n  const status = useSelector((state) => state.tokens.status);\n  const theme = useTheme();\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\n  const [groupByDay, setGroupByDay] = React.useState(true);\n\n  const groupByDayAndAverage = (data) => {\n    const groupedData = {};\n    data.forEach((entry) => {\n      const dateKey = entry.date.toISOString().split('T')[0];\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = { totalRealPrice: 0, count: 0 };\n      }\n      groupedData[dateKey].totalRealPrice += entry.realPrice;\n      groupedData[dateKey].count += 1;\n    });\n    return Object.entries(groupedData).map(([date, { totalRealPrice, count }]) => ({\n      date: new Date(date),\n      avgRealPrice: totalRealPrice / count,\n    }));\n  };\n\n  const chartData = (canvas) => {\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(0, 0, 0, 300);\n    gradient.addColorStop(0, 'rgba(72, 177, 85, 0.3)');\n    gradient.addColorStop(1, 'rgba(72, 177, 85, 0)');\n\n    if (!tokenData) return;\n\n    const dataToPlot = groupByDay ? groupByDayAndAverage(tokenData) : tokenData;\n\n    // Format dates to 'dd MMM yyyy'\n    const formattedDates = dataToPlot.map((item) =>\n      new Intl.DateTimeFormat('en-US', {\n        day: '2-digit',\n        month: 'short',\n      }).format(item.date)\n    );\n\n    return {\n      labels: formattedDates,\n      datasets: [\n        {\n          label:  `${tokenDictioanry[selectedToken]} vs USD`,\n          data: dataToPlot.map((item) => item.avgRealPrice || item.realPrice),\n          fill: true,\n          backgroundColor: gradient,\n          borderColor: 'rgba(72, 177, 85, 0.8)',\n          pointRadius: 0,\n          tension: 0.3,\n        },\n      ],\n    };\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      y: {\n        ticks: {\n          color: 'white',\n          callback: function (value) {\n            return value >= 1000 ? `${value / 1000}k` : value.toFixed(2);\n          },\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n      },\n      x: {\n        ticks: {\n          color: 'white',\n          maxTicksLimit: 6,\n          maxRotation: 0,\n          minRotation: 0,\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n      },\n    },\n    plugins: {\n      zoom: {\n        pan: { enabled: true, mode: 'x' },\n        zoom: { enabled: true, mode: 'x', drag: true },\n      },\n    },\n  };\n  const toCapitalCase = (str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\n  return (\n    <div style={{ height: isMdUp ? '400px' : '200px', width: '100%' }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\n        <Typography variant=\"h6\" gutterBottom>\n          {toCapitalCase(selectedToken)} USD\n        </Typography>\n        <CustomSwitch groupByDay={groupByDay} setGroupByDay={setGroupByDay} />\n      </Box>\n      {status === 'loading' ? (\n        <p>Loading data...</p>\n      ) : tokenData ? (\n        <Line data={chartData} options={options} />\n      ) : (\n        <p>No data available</p>\n      )}\n    </div>\n  );\n};\n\nexport default GradientLineChart;","import React, { useState, useEffect } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\nimport CustomSwitch from '../../components/CustomSwitch';\nimport GradientLineChart from './GradientLineChart';\n\nconst tokenColors = {\n  BTC: '#F7931A',\n  ETH: '#627EEA',\n  ADA: '#0033AD',\n  LINK: '#2A5ADA',\n  LTC: '#345D9D',\n  BNB: '#F3BA2F',\n  MATIC: '#8247E5',\n  SOL: '#00FFA3',\n};\n\nconst LinePlotChart = ({ selectedToken }) => {\n {/* const [dataByToken, setDataByToken] = useState({});\n  const [groupByDay, setGroupByDay] = useState(true);\n\n  const loadCSVData = () => {\n    fetch(`${process.env.PUBLIC_URL}/data.csv`)\n      .then((response) => response.text())\n      .then((csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const tokenMap = {};\n            results.data.forEach((row) => {\n              if (row.Token && row.Real_price && row.Prediction_Ensemble) {\n                const date = new Date(row.Fecha);\n                if (!tokenMap[row.Token]) tokenMap[row.Token] = [];\n                tokenMap[row.Token].push({\n                  date,\n                  realPrice: row.Real_price,\n                  predictionEnsemble: row.Prediction_Ensemble,\n                });\n              }\n            });\n            setDataByToken(tokenMap);\n          },\n        });\n      });\n  };\n\n  const groupByDayAndAverage = (data) => {\n    const groupedData = {};\n    data.forEach((entry) => {\n      const dateKey = entry.date.toISOString().split('T')[0];\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = { totalRealPrice: 0, totalPrediction: 0, count: 0 };\n      }\n      groupedData[dateKey].totalRealPrice += entry.realPrice;\n      groupedData[dateKey].totalPrediction += entry.predictionEnsemble;\n      groupedData[dateKey].count += 1;\n    });\n    return Object.entries(groupedData).map(([date, { totalRealPrice, totalPrediction, count }]) => ({\n      date: new Date(date),\n      avgRealPrice: totalRealPrice / count,\n      avgPredictionEnsemble: totalPrediction / count,\n    }));\n  };\n\n  useEffect(() => {\n    loadCSVData();\n  }, []);*/}\n\n  return (\n    <Box sx={{ backgroundColor: 'transparent' }}>\n      <GradientLineChart selectedToken={selectedToken}/>\n      {/*<Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Real Price vs CryptoVoice Prediction (Token: {selectedToken})\n        </Typography>\n\n        <CustomSwitch groupByDay={groupByDay} setGroupByDay={setGroupByDay} />\n      </Box>\n      {selectedToken && dataByToken[selectedToken] && dataByToken[selectedToken].length > 0 ? (\n      <Plot\n        data={[\n          {\n            x: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.date)\n              : dataByToken[selectedToken].map((point) => point.date),\n            y: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.avgRealPrice)\n              : dataByToken[selectedToken].map((point) => point.realPrice),\n            mode: 'lines',\n            type: 'scatter',\n            line: groupByDay ? { color: 'white', width: 1, dash: 'dash' } : {color: 'white', width: 1},  // Real Price line in dashed style\n            name: groupByDay ? 'Day Average Price' : 'Real Price',\n            hoverlabel: {\n              font: {\n                color: 'white', // Font color for both parts\n              },\n              bgcolor: '#333', // Background for the name part (label)\n              bordercolor: 'rgba(255,255,255,0.2)', // Optional border color\n            },\n            hovertemplate: groupByDay ? \n              '<b>%{x|%b %d, %Y}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>'\n              :\n              '<b>%{x}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>',\n          },\n          {\n            x: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.date)\n              : dataByToken[selectedToken].map((point) => point.date),\n            y: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.avgPredictionEnsemble)\n              : dataByToken[selectedToken].map((point) => point.predictionEnsemble),\n            mode: 'lines',\n            type: 'scatter',\n            line: { color: tokenColors[selectedToken], width: 2 },  // Prediction line\n            name: groupByDay ? 'Day Average Prediction' : 'Prediction',\n            hoverlabel: {\n              font: {\n                color: tokenColors[selectedToken], // Font color for both parts\n              },\n              bgcolor: '#333', // Background for the name part (label)\n              bordercolor: 'rgba(255,255,255,0.2)', // Optional border color\n            },\n            hovertemplate: groupByDay ? \n              '<b>%{x|%b %d, %Y}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>'\n              :\n              '<b>%{x}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>',\n          }\n        ]}\n        layout={{\n          xaxis: {\n            title: 'Date',\n            type: 'date',\n            gridcolor: 'rgba(255, 255, 255, 0.1)',\n            titlefont: {\n              color: 'white',\n            },\n            tickfont: {\n              color: 'white',\n            },\n            showgrid: false,\n          },\n          yaxis: {\n            title: {\n              text: 'Price (USD)',\n              font: {\n                color: 'white',\n              },\n              standoff: 20,\n            },\n            gridcolor: 'rgba(255, 255, 255, 0.1)',\n            tickfont: {\n              color: 'white',\n            },\n            tickcolor: 'rgba(255, 255, 255, 0)',\n            ticklen: 10,\n            tickwidth: 0.1,\n          },\n          margin: { t: 30, r: 20, l: 60, b: 70 },\n          autosize: true,\n          height: 500,\n          legend: {\n            orientation: 'h',\n            x: 0.5,\n            xanchor: 'center',\n            y: -0.2,\n            yanchor: 'top',\n            font: { color: 'white' },\n          },\n          paper_bgcolor: 'rgba(255, 255, 255, 0)',\n          plot_bgcolor: 'rgba(255, 255, 255, 0)',\n        }}\n        useResizeHandler\n        style={{ width: '100%' }}\n        config={{\n          modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan2d', 'select2d', 'lasso2d'],\n          displaylogo: false,\n        }}\n      />\n      ) : (\n        <Typography>No data available for the selected token.</Typography>\n      )}*/}\n    </Box>\n  );\n};\n\nexport default LinePlotChart;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Box, Typography } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\n\nconst CandlePlotChart = ({ selectedToken }) => {\n  const tokenDictionary = {\n    bitcoin: 'BTC',\n    ethereum: 'ETH',\n    cardano: 'ADA',\n    litecoin: 'LTC',\n    binancecoin: 'BNB',\n    polygon: 'MATIC',\n    solana: 'SOL',\n  };\n\n  // Access token data and status from Redux\n  const tokenData = useSelector((state) => state.tokens.data[tokenDictionary[selectedToken]]);\n  const status = useSelector((state) => state.tokens.status);\n\n  // Prepare candlestick chart data\n  const prepareChartData = (data) => {\n    const groupedData = data.reduce((acc, point) => {\n      const dayKey = new Date(point.date).toISOString().split('T')[0];\n      if (!acc[dayKey]) {\n        acc[dayKey] = {\n          open: point.realPrice,\n          high: point.realPrice,\n          low: point.realPrice,\n          close: point.realPrice,\n        };\n      } else {\n        acc[dayKey].high = Math.max(acc[dayKey].high, point.realPrice);\n        acc[dayKey].low = Math.min(acc[dayKey].low, point.realPrice);\n        acc[dayKey].close = point.realPrice;\n      }\n      return acc;\n    }, {});\n\n    return Object.entries(groupedData).map(([date, { open, high, low, close }]) => ({\n      date: new Date(date),\n      open,\n      high,\n      low,\n      close,\n    }));\n  };\n\n  const processedData = tokenData ? prepareChartData(tokenData) : [];\n\n  return (\n    <Box sx={{ backgroundColor: 'transparent' }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Candlestick Chart (Token: {selectedToken.charAt(0).toUpperCase() + selectedToken.slice(1)})\n      </Typography>\n      {status === 'loading' ? (\n        <Typography>Loading data...</Typography>\n      ) : status === 'failed' ? (\n        <Typography variant=\"body2\" style={{ color: 'red' }}>\n          Error loading data for {selectedToken}.\n        </Typography>\n      ) : processedData.length > 0 ? (\n        <Plot\n          data={[\n            {\n              x: processedData.map((point) => point.date),\n              open: processedData.map((point) => point.open),\n              high: processedData.map((point) => point.high),\n              low: processedData.map((point) => point.low),\n              close: processedData.map((point) => point.close),\n              type: 'candlestick',\n              name: tokenDictionary[selectedToken],\n              increasing: { line: { color: '#2AAE6F', width: 0.7 } },\n              decreasing: { line: { color: '#FF3333', width: 0.7 } },\n            },\n          ]}\n          layout={{\n            xaxis: {\n              title: 'Date',\n              type: 'date',\n              gridcolor: 'rgba(255, 255, 255, 0.1)',\n              titlefont: {\n                color: 'white',\n              },\n              tickfont: {\n                color: 'white',\n              },\n              showgrid: false,\n            },\n            yaxis: {\n              title: {\n                text: 'Price (USD)',\n                font: {\n                  color: 'white',\n                },\n                standoff: 20,\n              },\n              gridcolor: 'rgba(255, 255, 255, 0.1)',\n              tickfont: {\n                color: 'white',\n              },\n              tickcolor: 'rgba(255, 255, 255, 0)',\n              ticklen: 10,\n              tickwidth: 0.5,\n            },\n            margin: { t: 30, r: 20, l: 60, b: 70 },\n            autosize: true,\n            height: 500,\n            paper_bgcolor: 'rgba(255, 255, 255, 0)',\n            plot_bgcolor: 'rgba(255, 255, 255, 0)',\n          }}\n          useResizeHandler\n          style={{ width: '100%' }}\n          config={{\n            modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan2d', 'select2d', 'lasso2d'],\n            displaylogo: false,\n          }}\n        />\n      ) : (\n        <Typography>No data available for {selectedToken}.</Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default CandlePlotChart;","import React from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport LinePlotChart from './LinePlotChart';\nimport CandlePlotChart from './CandlePlotChart';\n\nconst ChartsContainer = ({ selectedToken }) => {\n  return (\n    <React.Fragment>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <Card className=\"customCard\">\n            <CardContent>\n              <LinePlotChart selectedToken={selectedToken} />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default ChartsContainer;","import React from 'react';\nimport { Grid, Button, Typography } from '@material-ui/core';\nimport btcImage from '../../../images/btc.png';\nimport ethImage from '../../../images/eth.png';\nimport adaImage from '../../../images/ada.png';\nimport linkImage from '../../../images/link.png';\nimport ltcImage from '../../../images/ltc.png';\nimport bnbImage from '../../../images/bnb.png';\nimport maticImage from '../../../images/matic.png';\nimport solImage from '../../../images/sol.png';\n\n// Sample token images\nconst tokenImages = {\n  BTC: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n  ETH: ethImage,\n  ADA: adaImage,\n // LINK: linkImage,\n  LTC: 'https://cryptologos.cc/logos/litecoin-ltc-logo.png',\n  BNB: 'https://cryptologos.cc/logos/binance-coin-bnb-logo.png',\n // MATIC: maticImage,\n //SOL: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n};\n\n// token map\nconst tokenMap = {\n  bitcoin: 'BTC',\n  ethereum: 'ETH',\n  cardano: 'ADA',\n  litecoin: 'LTC',\n  binancecoin: 'BNB',\n\n};\n// Function to get the key by value\nconst getKeyByValue = (map, value) => {\n  return Object.keys(map).find((key) => map[key] === value);\n};\nconst TokenToolbar = ({ selectedToken, onTokenChange }) => {\n  const availableTokens = Object.keys(tokenImages);\n\n  return (\n    <div>\n      <Grid container spacing={2} style={{ marginBottom: '20px', marginTop: '20px' }}>\n        {availableTokens.map((token) => (\n          <Grid item key={token}>\n            <Button\n              onClick={() => onTokenChange(getKeyByValue(tokenMap, token))}\n              className={tokenMap[selectedToken] === token ? 'selectedToken' : ''}\n            >\n              <img\n                src={tokenImages[token]} // Use the token image for each button\n                alt={token}\n                style={{\n                  width: 20,\n                  height: 20,\n                  borderRadius: '50%', // Keep the image circular\n                }}\n              />\n              <Typography variant=\"caption\" align=\"center\" style={{ marginLeft: '10px', marginRight: '10px' }}>\n                {token}\n              </Typography>\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default TokenToolbar;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { darken, lighten } from '../styles/colorManipulator';\nimport useTheme from '../styles/useTheme';\nvar TRANSITION_DURATION = 4; // seconds\n\nexport var styles = function styles(theme) {\n  var getColor = function getColor(color) {\n    return theme.palette.type === 'light' ? lighten(color, 0.62) : darken(color, 0.5);\n  };\n\n  var backgroundPrimary = getColor(theme.palette.primary.main);\n  var backgroundSecondary = getColor(theme.palette.secondary.main);\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      overflow: 'hidden',\n      height: 4,\n      '@media print': {\n        colorAdjust: 'exact'\n      }\n    },\n\n    /* Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant=\"buffer\"`. */\n    colorPrimary: {\n      backgroundColor: backgroundPrimary\n    },\n\n    /* Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`. */\n    colorSecondary: {\n      backgroundColor: backgroundSecondary\n    },\n\n    /* Styles applied to the root element if `variant=\"determinate\"`. */\n    determinate: {},\n\n    /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `variant=\"buffer\"`. */\n    buffer: {\n      backgroundColor: 'transparent'\n    },\n\n    /* Styles applied to the root element if `variant=\"query\"`. */\n    query: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    dashed: {\n      position: 'absolute',\n      marginTop: 0,\n      height: '100%',\n      width: '100%',\n      animation: '$buffer 3s infinite linear'\n    },\n\n    /* Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`. */\n    dashedColorPrimary: {\n      backgroundImage: \"radial-gradient(\".concat(backgroundPrimary, \" 0%, \").concat(backgroundPrimary, \" 16%, transparent 42%)\"),\n      backgroundSize: '10px 10px',\n      backgroundPosition: '0 -23px'\n    },\n\n    /* Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`. */\n    dashedColorSecondary: {\n      backgroundImage: \"radial-gradient(\".concat(backgroundSecondary, \" 0%, \").concat(backgroundSecondary, \" 16%, transparent 42%)\"),\n      backgroundSize: '10px 10px',\n      backgroundPosition: '0 -23px'\n    },\n\n    /* Styles applied to the layered bar1 and bar2 elements. */\n    bar: {\n      width: '100%',\n      position: 'absolute',\n      left: 0,\n      bottom: 0,\n      top: 0,\n      transition: 'transform 0.2s linear',\n      transformOrigin: 'left'\n    },\n\n    /* Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\". */\n    barColorPrimary: {\n      backgroundColor: theme.palette.primary.main\n    },\n\n    /* Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\". */\n    barColorSecondary: {\n      backgroundColor: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the bar1 element if `variant=\"indeterminate or query\"`. */\n    bar1Indeterminate: {\n      width: 'auto',\n      animation: '$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite'\n    },\n\n    /* Styles applied to the bar1 element if `variant=\"determinate\"`. */\n    bar1Determinate: {\n      transition: \"transform .\".concat(TRANSITION_DURATION, \"s linear\")\n    },\n\n    /* Styles applied to the bar1 element if `variant=\"buffer\"`. */\n    bar1Buffer: {\n      zIndex: 1,\n      transition: \"transform .\".concat(TRANSITION_DURATION, \"s linear\")\n    },\n\n    /* Styles applied to the bar2 element if `variant=\"indeterminate or query\"`. */\n    bar2Indeterminate: {\n      width: 'auto',\n      animation: '$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite'\n    },\n\n    /* Styles applied to the bar2 element if `variant=\"buffer\"`. */\n    bar2Buffer: {\n      transition: \"transform .\".concat(TRANSITION_DURATION, \"s linear\")\n    },\n    // Legends:\n    // || represents the viewport\n    // -  represents a light background\n    // x  represents a dark background\n    '@keyframes indeterminate1': {\n      //  |-----|---x-||-----||-----|\n      '0%': {\n        left: '-35%',\n        right: '100%'\n      },\n      //  |-----|-----||-----||xxxx-|\n      '60%': {\n        left: '100%',\n        right: '-90%'\n      },\n      '100%': {\n        left: '100%',\n        right: '-90%'\n      }\n    },\n    '@keyframes indeterminate2': {\n      //  |xxxxx|xxxxx||-----||-----|\n      '0%': {\n        left: '-200%',\n        right: '100%'\n      },\n      //  |-----|-----||-----||-x----|\n      '60%': {\n        left: '107%',\n        right: '-8%'\n      },\n      '100%': {\n        left: '107%',\n        right: '-8%'\n      }\n    },\n    '@keyframes buffer': {\n      '0%': {\n        opacity: 1,\n        backgroundPosition: '0 -23px'\n      },\n      '50%': {\n        opacity: 0,\n        backgroundPosition: '0 -23px'\n      },\n      '100%': {\n        opacity: 1,\n        backgroundPosition: '-200px -23px'\n      }\n    }\n  };\n};\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nvar LinearProgress = /*#__PURE__*/React.forwardRef(function LinearProgress(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      value = props.value,\n      valueBuffer = props.valueBuffer,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"value\", \"valueBuffer\", \"variant\"]);\n\n  var theme = useTheme();\n  var rootProps = {};\n  var inlineStyles = {\n    bar1: {},\n    bar2: {}\n  };\n\n  if (variant === 'determinate' || variant === 'buffer') {\n    if (value !== undefined) {\n      rootProps['aria-valuenow'] = Math.round(value);\n      rootProps['aria-valuemin'] = 0;\n      rootProps['aria-valuemax'] = 100;\n      var transform = value - 100;\n\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n\n      inlineStyles.bar1.transform = \"translateX(\".concat(transform, \"%)\");\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('Material-UI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');\n    }\n  }\n\n  if (variant === 'buffer') {\n    if (valueBuffer !== undefined) {\n      var _transform = (valueBuffer || 0) - 100;\n\n      if (theme.direction === 'rtl') {\n        _transform = -_transform;\n      }\n\n      inlineStyles.bar2.transform = \"translateX(\".concat(_transform, \"%)\");\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('Material-UI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(color))], className, {\n      'determinate': classes.determinate,\n      'indeterminate': classes.indeterminate,\n      'buffer': classes.buffer,\n      'query': classes.query\n    }[variant]),\n    role: \"progressbar\"\n  }, rootProps, {\n    ref: ref\n  }, other), variant === 'buffer' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.dashed, classes[\"dashedColor\".concat(capitalize(color))])\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.bar, classes[\"barColor\".concat(capitalize(color))], (variant === 'indeterminate' || variant === 'query') && classes.bar1Indeterminate, {\n      'determinate': classes.bar1Determinate,\n      'buffer': classes.bar1Buffer\n    }[variant]),\n    style: inlineStyles.bar1\n  }), variant === 'determinate' ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.bar, (variant === 'indeterminate' || variant === 'query') && classes.bar2Indeterminate, variant === 'buffer' ? [classes[\"color\".concat(capitalize(color))], classes.bar2Buffer] : classes[\"barColor\".concat(capitalize(color))]),\n    style: inlineStyles.bar2\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? LinearProgress.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The value for the buffer variant.\n   * Value between 0 and 100.\n   */\n  valueBuffer: PropTypes.number,\n\n  /**\n   * The variant to use.\n   * Use indeterminate or query when there is no progress value.\n   */\n  variant: PropTypes.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLinearProgress'\n})(LinearProgress);","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, Typography, Box, LinearProgress, Card, CardContent } from '@material-ui/core';\nimport { Icon } from '@iconify/react';\nimport emoticonHappyOutline from '@iconify/icons-mdi/emoticon-happy-outline';\nimport sadFaceIcon from '@iconify-icons/mdi/emoticon-sad-outline';\nimport { fetchSentimentData } from '../../../redux/store/sentimentSlice';\n\nconst FearGreedIndicator = () => {\n  const dispatch = useDispatch();\n  const { data: sentimentData, status, error } = useSelector((state) => state.sentiment);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchSentimentData());\n    }\n  }, [dispatch, status]);\n\n  const latestData = sentimentData.length > 0 ? sentimentData[0] : null;\n\n  return (\n    <Card className=\"customCard\">\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Fear & Greed Index\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom style={{ marginBottom: 30 }}>\n          Powered by Alternative.me API\n        </Typography>\n\n        {status === 'loading' ? (\n          <Box>\n            <Typography variant=\"body2\">Loading sentiment data...</Typography>\n            <LinearProgress />\n          </Box>\n        ) : status === 'failed' ? (\n          <Typography variant=\"body2\" style={{ color: 'red' }}>\n            {error || 'Failed to load sentiment data'}\n          </Typography>\n        ) : latestData ? (\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Icon\n                icon={latestData.value <= 50 ? sadFaceIcon : emoticonHappyOutline}\n                style={{\n                  width: 58,\n                  height: 58,\n                  marginRight: 10,\n                  color: latestData.value <= 50 ? '#FF3333' : '#2AAE6F',\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h6\">\n                {latestData.value <= 50 ? 'Fear Mood' : 'Greed Mood'}\n              </Typography>\n              <Typography\n                variant=\"body2\"\n                style={{\n                  color: latestData.value <= 50 ? '#FF3333' : '#2AAE6F',\n                  fontWeight: 500,\n                  fontSize: '0.85rem',\n                }}\n              >\n                {latestData.value}% - {latestData.classification}\n              </Typography>\n            </Grid>\n          </Grid>\n        ) : (\n          <Typography variant=\"body2\">No data available</Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FearGreedIndicator;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, CardContent, Typography, Box, Avatar, LinearProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fetchTopGainers } from '../../../redux/store/topGainersSlice';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    backgroundColor: '#1E2329',\n    color: 'white',\n    borderRadius: 12,\n    padding: theme.spacing(2),\n  },\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n  coinRow: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: theme.spacing(2, 0),\n  },\n  coinInfo: {\n    display: 'flex',\n    alignItems: 'center',\n    flex: 2,\n  },\n  coinLogo: {\n    width: 24,\n    height: 24,\n    marginRight: theme.spacing(2),\n  },\n  coinName: {\n    fontSize: '1rem',\n    fontWeight: 500,\n  },\n  priceColumn: {\n    flex: 1,\n    textAlign: 'right',\n    fontWeight: 600,\n  },\n  changeColumn: {\n    flex: 1,\n    textAlign: 'right',\n    fontWeight: 600,\n  },\n}));\n\nconst TopGainersCard = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  // Retrieve top gainers data and status from the Redux store\n  const { data: topGainers, status, error } = useSelector((state) => state.topGainers);\n\n  // Dispatch fetchTopGainers thunk on component mount\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchTopGainers());\n    }\n  }, [dispatch, status]);\n\n  return (\n    <Card className=\"customCard\">\n      <CardContent>\n        <Box className={classes.header}>\n          <Typography variant=\"h6\">Top Gainers</Typography>\n        </Box>\n\n        {status === 'loading' && (\n          <Box>\n            <Typography variant=\"body2\">Loading top gainers...</Typography>\n            <LinearProgress />\n          </Box>\n        )}\n\n        {status === 'failed' && (\n          <Typography variant=\"body2\" style={{ color: 'red' }}>\n            {error || 'Failed to load top gainers data'}\n          </Typography>\n        )}\n\n        {status === 'succeeded' &&\n          topGainers.map((coin) => (\n            <Box key={coin.id} className={classes.coinRow}>\n              <Box className={classes.coinInfo}>\n                <Avatar src={coin.image} alt={coin.symbol} className={classes.coinLogo} />\n                <Typography className={classes.coinName}>\n                  {coin.symbol.toUpperCase()}\n                </Typography>\n              </Box>\n              <Typography className={classes.priceColumn}>\n                ${coin.price.toLocaleString()}\n              </Typography>\n              <Typography\n                className={classes.changeColumn}\n                style={{ color: parseFloat(coin.change) >= 0 ? '#2AAE6F' : '#FF3333' }}\n              >\n                {parseFloat(coin.change) >= 0 ? '+' : ''}\n                {parseFloat(coin.change).toFixed(2)}%\n              </Typography>\n            </Box>\n          ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TopGainersCard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, Button, Dialog, DialogContent, IconButton, Box, Typography, Card, CardContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Star } from '@material-ui/icons';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport ChartsContainer from './ChartsContainer';\nimport TokenToolbar from './TokenToolbar';\nimport { fetchAllHistoricalData } from '../../../redux/store/tokenSlice';\nimport FearGreedIndicator from './FearGreedIndicator';\nimport TopGainersCard from './TopGainers';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { hi } from 'date-fns/locale';\nimport CandlePlotChart from './CandlePlotChart';\nimport FramerCard from '../FreeDashboard/FrameCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(1),\n  },\n  buttonContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    justifyContent: 'center',\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const theme = useTheme();\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md')); // Check if screen width is md or higher\n\n  // Access token data and status from Redux\n  const historicalData = useSelector((state) => state.tokens.data);\n  const status = useSelector((state) => state.tokens.status);\n\n  const [selectedToken, setSelectedToken] = useState('bitcoin');\n  const [favoriteTokens, setFavoriteTokens] = useState(['bitcoin', 'ethereum']);\n  const [openAlertModal, setOpenAlertModal] = useState(false);\n  const [availableTokens] = useState([\n    { id: 'bitcoin', symbol: 'BTC' },\n    { id: 'ethereum', symbol: 'ETH' },\n    { id: 'cardano', symbol: 'ADA' },\n    { id: 'chainlink', symbol: 'LINK' },\n    { id: 'litecoin', symbol: 'LTC' },\n    { id: 'binancecoin', symbol: 'BNB' },\n    { id: 'matic-network', symbol: 'MATIC' },\n    { id: 'solana', symbol: 'SOL' },\n  ]);\n\n  const tokenDictioanry = {\n    'bitcoin': 'BTC',\n    'ethereum': 'ETH',\n    'cardano': 'ADA',\n    'litecoin': 'LTC',\n    'binancecoin': 'BNB',\n    'polygon': 'MATIC',\n    'solana': 'SOL',\n  };\n\n  // Dispatch the action to fetch all historical data\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchAllHistoricalData());\n    }\n  }, [dispatch, status]);\n\n  const handleFavoriteToggle = () => {\n    setFavoriteTokens((prev) =>\n      prev.includes(selectedToken)\n        ? prev.filter((token) => token !== selectedToken)\n        : [...prev, selectedToken]\n    );\n  };\n\n  const handleOpenAlertModal = () => setOpenAlertModal(true);\n  const handleCloseAlertModal = () => setOpenAlertModal(false);\n\n  const downloadCSV = () => {\n    const token = selectedToken ? tokenDictioanry[selectedToken] : undefined;\n    console.log(historicalData[token])\n    if (selectedToken && historicalData[token]) {\n      const csvData = historicalData[token]\n        .map((item) => `${item.date.toISOString()},${item.realPrice}`)\n        .join('\\n');\n      const blob = new Blob([`Date,Price\\n${csvData}`], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `${selectedToken}_historical_data.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <Grid container spacing={5} className={classes.root}>\n      <Grid item xs={12} md={8}>\n        <TokenToolbar\n          selectedToken={selectedToken}\n          onTokenChange={setSelectedToken}\n          favoriteTokens={favoriteTokens}\n          setFavoriteTokens={setFavoriteTokens}\n          availableTokens={availableTokens.map((token) => token.symbol)}\n        />\n      </Grid>\n\n      <Grid item xs={12} md={4} className={classes.buttonContainer}>\n{/*         <IconButton\n          onClick={handleFavoriteToggle}\n          aria-label=\"favorite\"\n          style={{\n            backgroundColor: favoriteTokens.includes(selectedToken) ? '#196CBF' : 'rgba(255, 255, 255, 0.1)',\n            padding: 5,\n            borderRadius: 20,\n            opacity: 0.9,\n          }}\n          disabled={true}\n        >\n          <Star style={{ color: '#ffffff', width: 26, height: 26 }} />\n        </IconButton> */}\n        <IconButton\n          className='buttonDisabled'\n          onClick={handleFavoriteToggle}\n          aria-label=\"favorite\"\n          style={{\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\n            padding: 5,\n            borderRadius: 20,\n            opacity: 0.9,\n            boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)',\n          }}\n          disabled\n        >\n          <Star style={{ color: 'rgba(255, 255, 255, 0.5)', width: 26, height: 26 }} />\n        </IconButton>\n{/*         <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={handleOpenAlertModal}\n          startIcon={<NotificationsIcon />}\n          disabled={true}\n        >\n          Create Alert\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={downloadCSV}\n          startIcon={<GetAppIcon />}\n        >\n          Download CSV Data\n        </Button> */}\n\n        {isMdUp ? (\n        // Full buttons with text on larger screens\n        <>\n          <Button \n            className='buttonDisabled'\n            variant=\"outlined\" \n            color=\"primary\" \n            onClick={handleOpenAlertModal} \n            startIcon={<NotificationsIcon />}\n            disabled\n          >\n            Create Alert\n          </Button>\n\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={downloadCSV}\n            startIcon={<GetAppIcon />}\n          >\n            Download CSV Data\n          </Button>\n        </>\n      ) : (\n        // Icon-only buttons on mobile\n        <>\n          <IconButton \n            color=\"primary\" \n            onClick={handleOpenAlertModal}\n            style={{\n              backgroundColor:  'rgba(255, 255, 255, 0.1)',\n              padding: 5,\n              borderRadius: 20,\n              opacity: 0.9,\n              boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)',\n            }}\n          >\n            <NotificationsIcon style={{ color: 'rgba(255, 255, 255, 0.5)', width: 26, height: 26 }} />\n          </IconButton>\n\n          <IconButton \n            color=\"primary\" \n            onClick={downloadCSV}\n            style={{\n              backgroundColor: 'rgba(255, 255, 255, 0.1)', // Bright blue background for enabled state\n              padding: 5,\n              borderRadius: 20,\n              border: '1px solid #FFFFFF', // White border\n              opacity: 1, // Full opacity\n              boxShadow: 'none', // Remove shadow\n            }}\n          >\n            <GetAppIcon style={{ color: '#FFFFFF', width: 26, height: 26 }} />\n          </IconButton>\n        </>\n      )}\n      </Grid>\n\n      <Grid container spacing={5}>\n        <Grid item xs={12} md={8}>\n          <ChartsContainer selectedToken={selectedToken} />\n          <Card className=\"customCard\" style={{marginTop: 20}}>\n            <CardContent>\n              <CandlePlotChart selectedToken={selectedToken} />\n            </CardContent>\n        </Card>\n        </Grid>\n        {/* Right Side - Info Cards */}\n        <Grid \n          item \n          xs={12} \n          md={4} \n          spacing={15}\n          style={isMdUp ? { } : {}}\n        > \n          <Box style={ {marginBottom: 20}}>\n            <FearGreedIndicator />\n          </Box>\n          <Box>\n            <TopGainersCard/>\n          </Box>\n        </Grid>\n      </Grid>\n      <FramerCard/>\n      <Dialog\n        open={openAlertModal}\n        onClose={handleCloseAlertModal}\n        fullWidth\n        maxWidth=\"sm\"\n        PaperProps={{\n          style: {\n            borderRadius: 20,\n            maxWidth: 350,\n            background: 'rgba(30, 35, 41, 0.1)',\n          },\n        }}\n      >\n        <DialogContent>\n          <Typography variant=\"h6\" gutterBottom>\n            {selectedToken} Price Alert\n          </Typography>\n          <Typography variant=\"body2\" gutterBottom>\n            Set your price thresholds\n          </Typography>\n        </DialogContent>\n      </Dialog>\n    </Grid>\n  );\n};\n\nexport default Dashboard;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../../../App.css';\nimport NewsSection from './NewsSection';\nimport Carousel from './Carousel';\n\n// Material UI\nimport {\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\n// Project files\nimport { copyJSONToClipboard } from '../../../utils/copyToClipboard';\nimport AccessDenied from '../../../components/AccessDenied';\n\n// Import actions from Redux slice\nimport {\n  clearAllFilters,\n  setSearchDisable} from '../../../redux/store/dbFilterSlice';\nimport Dashboard from './Dashboard';\nimport { margin } from 'polished';\n\nfunction Database() {\n  const dispatch = useDispatch();\n\n  // Access Redux state\n  const {\n    appliedFilters,\n    accessDenied,\n  } = useSelector((state) => state.filters);\n\n  // Local state variables\n  const [resultCount, setResultCount] = useState('');\n  const [evaluationsData, setEvaluationsData] = useState({});\n  const [subjectsData, setSubjectsData] = useState({});\n  const [resultsLoading, setResultsLoading] = useState(false);\n  const [searchFilters, setSearchFilters] = useState({})\n\n  const handleSearch = () => {\n    dispatch(setSearchDisable(true));\n\n    // Ensure appliedFilters has evaluation_filters and subject_filters\n    const jsonAppliedFilters = {\n      evaluation_filters: appliedFilters.evaluations_filters || {},\n      subject_filters: appliedFilters.subjects_filters || {},\n    };\n    setSearchFilters(jsonAppliedFilters);\n    setResultsLoading(true);\n    window.scroll(0, document.body.scrollHeight/3);\n\n  };\n\n  const handleClearFilters = () => {\n    dispatch(clearAllFilters());\n    dispatch(setSearchDisable(true));\n  };\n\n  const handleCopyFilters = () => {\n    copyJSONToClipboard(searchFilters);\n  };\n\n  return !accessDenied ? (\n    <Grid container spacing={3}>\n      <Typography variant=\"h1\" gutterBottom>\n        CryptoVoice Dashboard\n      </Typography>\n      <Dashboard evaluations={evaluationsData} subjects={subjectsData} handleCopyFilters={handleCopyFilters}/>\n      <Typography variant=\"h1\" gutterBottom style={{marginTop: \"70px\", marginBottom: \"40px\"}}>\n        Crypto News Spotlight\n      </Typography>\n      <Carousel />\n      <NewsSection />\n\n    </Grid>\n  ) : (\n    <AccessDenied />\n  );\n}\n\nexport default Database;"],"sourceRoot":""}