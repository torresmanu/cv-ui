{"version":3,"sources":["utils/hooksLib.js","pages/auth/SignUp.js","utils/objects.js"],"names":["useFormFields","initialState","fields","setValues","useState","event","newFields","path","key","target","id","name","value","setProperty","Button","styled","MuiButton","spacing","Wrapper","Paper","props","theme","breakpoints","up","SignUp","handleFieldChange","username","email","password","React","createElement","Typography","component","variant","align","gutterBottom","onSubmit","preventDefault","AuthService","register","FormControl","margin","required","fullWidth","TextField","autoComplete","label","autoFocus","onChange","color","md","type","obj","schema","pList","split","len","length","i","elem","getProperty","undefined","deleteKeysWithStart","startsWith","Object","keys","forEach","removeNotIncluded","object","allowedKeys","includes"],"mappings":"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","file":"static/js/28.870cf3b0.chunk.js","sourcesContent":["import { useState, useReducer, useMemo } from \"react\";\nimport {deleteKeysWithStart, getProperty, setProperty} from \"./objects\";\nimport store from \"../redux/store\";\nimport {setFormStatus} from \"../redux/actions/formsActions\";\nimport {produce} from 'immer';\nimport {trimChar} from \"./strings\";\n\n\nexport function useFormFields(initialState) {\n  const [fields, setValues] = useState(initialState);\n  return [\n    fields,\n    //  handleFieldChange\n    function(event) {\n      const newFields = {...fields};\n\n      const path = event.key || event.target.id || event.target.name;\n      const value = event.target ? event.target.value : event.value;\n      setProperty(newFields, path, value);\n\n      setValues({\n        ...newFields\n      });\n    },\n    //  reset\n    function() {\n      setValues(initialState);\n    }\n  ];\n}\nfunction findValidator(fieldName, validators) {\n  const properties = fieldName.split('.');\n  let validator = null;\n  const indexes = [];\n  const isRootField = properties.length === 1;\n  properties.forEach(\n    property => {\n      if(!isNaN(property)){\n        indexes.push(parseInt(property));\n      }\n      if (validator) {\n        const subValidator = validator[property];\n        if (subValidator) {\n          validator = subValidator;\n        }\n        return\n      }\n\n      const rootValidator = validators[property];\n      const isFunction = rootValidator instanceof Function;\n      //  Avoid assign root validator to nested fields\n      if(!isFunction || (isFunction && isRootField)){\n        validator = validators[property];\n      }\n    }\n  );\n  return {validator, indexes};\n}\n\nfunction validate(fieldName, fields, validators, fieldValue=undefined, extraArgs={}, initialState) {\n  const {validator, indexes} = findValidator(fieldName, validators);\n  let error;\n  if (validator && validator instanceof Function) {\n    const valueIndex = indexes[indexes.length - 1];\n    let value;\n    if(fieldValue === undefined) {\n      value = getProperty(fields, fieldName);\n    } else {\n      value = fieldValue;\n    }\n    const initialValue = getProperty(initialState, fieldName);\n    const validatorArgs = {value, fields, valueIndex, indexes, initialValue, ...extraArgs};\n    error = validator(validatorArgs);\n  }\n  if (error) {\n    fields.errors[fieldName] = error;\n  } else {\n    delete fields.errors[fieldName];\n  }\n}\nconst formReducer = ({validators, initialState, emptyInitialState}) => function (draft, action) {\n  function runValidators(fields, previousKey=\"\") {\n    for (let key in fields) {\n      if(key === \"errors\") continue;\n\n      const value = fields[key];\n\n      if (value instanceof Object){ // Also applies for Arrays\n        runValidators(value, `${previousKey}.${key}`)\n      } else {\n        const fieldName = `${previousKey}.${key}`;\n        validate(trimChar(fieldName, \".\"), draft, validators, undefined, action.extraArgs, initialState);\n      }\n    }\n  }\n  switch (action.type) {\n    case 'FIELD_CHANGE': {\n      validate(action.fieldName, draft, validators, action.fieldValue, {}, initialState);\n      setProperty(draft, action.fieldName, action.fieldValue);\n      if(action.callback) action.callback(draft);\n      if(!draft.dirty && action.fieldValue?.length>0) {\n        store.dispatch(setFormStatus({model: draft.formModel, dirty: true}));\n        draft.dirty = true;\n      }\n      return;\n    }\n    case 'ADD_EMPTY_FIELD': {\n      const path = action.path;\n      let sample;\n      if (action.sample){\n        sample = action.sample;\n      } else {\n        sample = getProperty(emptyInitialState || initialState, path)[0];\n      }\n      getProperty(draft, path).push({...sample});\n      return;\n    }\n    case 'REMOVE_FIELD': {\n      const { path, index } = action;\n      getProperty(draft, path).splice(index, 1);\n      deleteKeysWithStart(draft.errors, `${path}.${index}`);\n      return;\n    }\n\n    case 'SUBMIT':\n      if (action.preValidator){\n        const {fieldName, fieldValue} = action.preValidator(draft)\n        setProperty(draft, fieldName, fieldValue);\n      }\n      runValidators(draft);\n\n      if(Object.keys(draft.errors).length === 0){\n        action.handleSubmit(draft);\n        store.dispatch(setFormStatus({model: draft.formModel, dirty: false}));\n        draft.dirty = false;\n      }\n      return;\n    default:\n  }\n}\n\nexport function useFormReducer({initialState, emptyInitialState, validators = {}}){\n  const memoizedInitialState = useMemo(\n    () => ({\n      ...initialState,\n      errors: {}\n    }),\n    []\n  );\n\n  const curriedFormReducer = useMemo(\n    () => {\n      return produce(formReducer({validators, initialState: memoizedInitialState, emptyInitialState}))\n    },\n    [memoizedInitialState]\n  );\n  const [state, dispatch] = useReducer(curriedFormReducer, memoizedInitialState);\n\n  const handleFieldChange = (e) => {\n    let fieldName, fieldValue;\n    const {target, key, value, callback, initialValue} = e;\n    if(target){\n      fieldName = e.target.name || e.target.id;\n      fieldValue = e.target.value;\n    } else {\n      fieldName = key;\n      fieldValue = value;\n    }\n\n    dispatch({\n      type: 'FIELD_CHANGE',\n      fieldName,\n      fieldValue,\n      callback,\n      initialValue\n    })\n  };\n\n  const addEmptyItem = (path, sample=null) => {\n    dispatch({\n      type: 'ADD_EMPTY_FIELD',\n      path,\n      sample\n    })\n  };\n\n  const removeItem = (path, index) => {\n    dispatch({\n      type: 'REMOVE_FIELD',\n      path,\n      index\n    })\n  };\n\n  const submit = (handleSubmit, preValidator=null, extraArgs) => {\n    dispatch({\n      type: 'SUBMIT',\n      handleSubmit,\n      preValidator,\n      extraArgs\n    })\n  };\n\n  const hasErrors = Object.keys(state.errors).length > 0;\n\n  return {fields: state, dispatch, hasErrors, submit, handleFieldChange, addEmptyItem, removeItem};\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  FormControl,\r\n  Button as MuiButton,\r\n  Paper,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport {useFormFields} from \"../../utils/hooksLib\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {AuthService} from \"../../services/AuthService\";\r\n\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nconst Wrapper = styled(Paper)`\r\n  padding: ${props => props.theme.spacing(6)}px;\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    padding: ${props => props.theme.spacing(10)}px;\r\n  }\r\n`;\r\n\r\n\r\nfunction SignUp() {\r\n  const [fields, handleFieldChange] = useFormFields({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    AuthService.register(fields.username, fields.email, fields.password)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Typography component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\r\n        Get started\r\n      </Typography>\r\n      <Typography component=\"h2\" variant=\"body1\" align=\"center\">\r\n        Start creating the best possible user experience for you customers\r\n      </Typography>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormControl margin=\"normal\" required fullWidth>\r\n          <TextField\r\n            id=\"username\"\r\n            name=\"username\"\r\n            autoComplete=\"username\"\r\n            label=\"Uuario\"\r\n            autoFocus\r\n            onChange={handleFieldChange}/>\r\n        </FormControl>\r\n        <FormControl margin=\"normal\" required fullWidth>\r\n          <TextField\r\n            id=\"email\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            label=\"Email\"\r\n            onChange={handleFieldChange}/>\r\n        </FormControl>\r\n        <FormControl margin=\"normal\" required fullWidth>\r\n          <TextField\r\n            id=\"password\"\r\n            name=\"password\"\r\n            autoComplete=\"password\"\r\n            label=\"Contraseña\"\r\n            onChange={handleFieldChange}/>\r\n        </FormControl>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          md={2}\r\n          type='submit'\r\n        >\r\n          Sign up\r\n        </Button>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n","export function setProperty(obj, path, value) {\n  let schema = obj;\n  const pList = path.split('.');\n  const len = pList.length;\n  for(let i = 0; i < len-1; i++) {\n    const elem = pList[i];\n    if( !schema[elem] ) schema[elem] = {}\n    schema = schema[elem];\n  }\n\n  schema[pList[len-1]] = value;\n}\n\nexport function getProperty(obj, path) {\n  let schema = obj;\n  const pList = path.split('.');\n  const len = pList.length;\n  for(let i = 0; i < len; i++) {\n    const elem = pList[i];\n    if(schema === undefined) return null;\n    schema = schema[elem];\n  }\n\n  return schema;\n}\n\n// const obj = {\n//   'someProp.0.nestedProp1': \"\",\n//   'someProp.0.nestedProp2': \"\",\n//   'someProp.1.nestedProp1': \"\",\n// }\n//\n// deletePath(obj, 'someProp.0')\n//\n// expected obj = {\n//   'someProp.1.nestedProp1': \"\",\n// }\nexport function deleteKeysWithStart(obj, startsWith) {\n  Object.keys(obj).forEach(key => {\n    if(key.startsWith(startsWith)){\n      delete obj[key];\n    }\n  })\n}\n\nexport const removeNotIncluded = (object, allowedKeys) => {\n  const objectKeys = Object.keys(object);\n  objectKeys.forEach(\n    key => {\n      if(!(allowedKeys.includes(key))){\n        delete object[key];\n      }\n    }\n  )\n  return object;\n};\n\n\nconst isAValue = ([key, value]) => {\n  if(key === 'custom_fields'){\n    return value.some(customField => customField.value)\n  }\n\n  if(value === false || value === 0) {\n    return true; //  false and 0 are values.\n  }\n\n  if(!value) {\n    return false;  //  value is null or undefined\n  }\n\n  if(value.constructor === Object) {\n    return Object.entries(value).length > 0\n  }\n\n  if(value.constructor === Array) {\n    if(value.length > 0) {\n      return value.some(hasSomeValue)\n    } else {\n      return false\n    }\n  }\n\n  return true;  // value is string, number, timestamp, etc\n};\n\nconst hasSomeValue = obj => {\n  const objectEntries = Object.entries(obj);\n\n  if(objectEntries.length === 0) return false;\n\n  return objectEntries.some(isAValue);\n}\n\n// params: array of objects { key: value }\n// return a new array, without the empty values objects like { a: '' , b: ''}\n// example: \n//   param = [{a: 1}, {b: ''}, {c: '', d: 'hola'}]\n//   clearEmptyHashOfArray(param)\n// result = [{a: 1}, {c: '', d: 'hola'}]\nexport const clearEmptyHashOfArray = (array) => {\n  return array.filter(hasSomeValue)\n}\n\nexport const toPlainObject = draft => (\n  JSON.parse(JSON.stringify(draft))\n)\n\nexport const objectValuesAreNotEmpty = object => {\n  return Object.values(object).every(value => Boolean(value))\n}"],"sourceRoot":""}