{"version":3,"sources":["pages/pages/Dashboard/NewsSection.js","pages/pages/Dashboard/Carousel.js","pages/pages/Dashboard/CurrentPricesCard.js","pages/pages/Dashboard/GradientLineChart.js","pages/pages/Dashboard/LinePlotChart.js","pages/pages/Dashboard/CandlePlotChart.js","pages/pages/Dashboard/ChartsContainer.js","pages/pages/Dashboard/TokenToolbar.js","pages/pages/Dashboard/FearGreedIndicator.js","pages/pages/Dashboard/CustomSlider.js","pages/pages/Dashboard/TopGainers.js","pages/pages/Dashboard/Dashboard.js","pages/pages/Dashboard/index.js"],"names":["newsData","imageUrl","btcNews","title","description","newsLink","StyledCard","styled","Card","ArrowContainer","Grid","NewsCard","_ref","handleNext","handlePrevious","React","createElement","className","CardContent","container","spacing","item","xs","alignItems","md","IconButton","onClick","ArrowBackIos","style","color","src","alt","width","Typography","variant","marginBottom","Button","window","open","padding","height","marginTop","ArrowForwardIos","NewsSection","currentIndex","setCurrentIndex","useState","currentNews","prevIndex","length","scrollAnimation","keyframes","CarouselContainer","div","CarouselContent","duration","TweetContainer","Avatar","img","tweets","username","text","avatar","Carousel","carouselContentRef","useRef","animationDuration","setAnimationDuration","useEffect","current","contentWidth","scrollWidth","viewportWidth","parentElement","offsetWidth","ref","map","tweet","index","Tooltip","key","arrow","placement","href","target","rel","textDecoration","slice","tokenPrices","BTC","price","change","ETH","ADA","LINK","LTC","BNB","MATIC","SOL","tokenImages","ethImage","adaImage","linkImage","maticImage","CurrentPricesCard","favoriteTokens","gutterBottom","token","isPositiveChange","startsWith","sm","marginRight","fontWeight","fontSize","ChartJS","register","LineElement","PointElement","LinearScale","CategoryScale","Filler","Title","Legend","zoomPlugin","tokenColors","GradientLineChart","selectedToken","dataByToken","setDataByToken","groupByDay","setGroupByDay","theme","useTheme","isMdUp","useMediaQuery","breakpoints","up","fetch","then","response","csvText","Papa","parse","header","dynamicTyping","complete","results","tokenMap","data","forEach","row","Token","Real_price","Prediction_Ensemble","date","Date","Fecha","push","realPrice","predictionEnsemble","options","responsive","maintainAspectRatio","AspectRatio","scales","y","ticks","callback","value","toFixed","font","size","grid","display","x","maxTicksLimit","values","this","getLabelForValue","getDate","toLocaleString","month","maxRotation","minRotation","plugins","legend","position","align","labels","boxWidth","marginLeft","left","zoom","pan","enabled","mode","drag","interaction","axis","intersect","optionsMobile","aspectRatio","innerWidth","Box","sx","flexDirection","justifyContent","CustomSwitch","Fragment","Line","canvas","gradient","getContext","createLinearGradient","addColorStop","dataToPlot","groupedData","entry","dateKey","toISOString","split","totalRealPrice","totalPrediction","count","Object","entries","_ref2","avgRealPrice","avgPredictionEnsemble","groupByDayAndAverage","datasets","label","fill","backgroundColor","borderColor","pointRadius","tension","borderRadius","LinePlotChart","CandlePlotChart","cutoffDate","dayKey","high","Math","max","low","min","close","flattenedTokenMap","keys","Plot","point","type","name","increasing","line","decreasing","layout","xaxis","gridcolor","titlefont","tickfont","showgrid","yaxis","standoff","tickcolor","ticklen","tickwidth","margin","t","r","l","b","autosize","paper_bgcolor","plot_bgcolor","useResizeHandler","config","modeBarButtonsToRemove","displaylogo","ChartsContainer","TokenToolbar","onTokenChange","availableTokens","FearGreedIndicator","isFear","Icon","icon","sadFaceIcon","emoticonHappyOutline","WhiteSlider","withStyles","root","Slider","useStyles","makeStyles","valuetext","CustomSlider","classes","setValue","onChange","handleChange","event","newValue","valueLabelDisplay","getAriaValueText","step","coins","symbol","logo","card","coinRow","coinInfo","flex","coinLogo","coinName","priceColumn","textAlign","changeColumn","changePositive","changeNegative","TopGainersCard","coin","flexGrow","buttonContainer","gap","dialogContent","background","rgba","backdropFilter","boxShadow","sliderBox","sliderIcon","palette","primary","main","dialogActionsBox","Dashboard","setSelectedToken","setFavoriteTokens","openAlertModal","setOpenAlertModal","lowerThreshold","setLowerThreshold","upperThreshold","setUpperThreshold","setAvailableTokens","tokens","downloadCSV","csv","unparse","blob","Blob","url","URL","createObjectURL","link","document","setAttribute","body","appendChild","click","removeChild","handleOpenAlertModal","handleCloseAlertModal","trimToTwoDecimals","num","floor","undefined","lower","upper","handleFavoriteToggle","prev","includes","filter","opacity","Star","startIcon","NotificationsIcon","GetAppIcon","FramerCard","Dialog","onClose","fullWidth","maxWidth","PaperProps","border","DialogContent","handleCreateAlert","Database","useDispatch","appliedFilters","accessDenied","useSelector","state","filters","resultCount","setResultCount","evaluationsData","setEvaluationsData","subjectsData","setSubjectsData","resultsLoading","setResultsLoading","searchFilters","setSearchFilters","AccessDenied","evaluations","subjects","handleCopyFilters","copyJSONToClipboard"],"mappings":"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","file":"static/js/18.ddd1dc62.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Grid, Card, CardContent, Typography, Button, IconButton } from '@material-ui/core';\nimport { ArrowBackIos, ArrowForwardIos } from '@material-ui/icons';\nimport btcNews from '../../../images/Bitcoin_modern.png'; // Import your image\nimport styled from 'styled-components';\n\nconst newsData = [\n  {\n    imageUrl: btcNews,\n    title: 'Latest Crypto News: Bitcoin Hits All-Time High',\n    description:\n      'Researchers at Shanghai University recently claimed to have made a significant breakthrough by cracking RSA encryption algorithms used in banking, military, and cryptocurrency sectors...',\n    newsLink: 'https://cryptonews.com/',\n  },\n  {\n    imageUrl: btcNews,\n    title: 'Ethereum Soars After Upgrade',\n    description:\n      'The latest Ethereum upgrade has sent the price soaring...',\n    newsLink: 'https://cryptonews.com/ethereum',\n  },\n  // Add more news items here\n];\n\nconst StyledCard = styled(Card)`\n  position: relative;\n  &:hover .arrows {\n    opacity: 1;\n  }\n`;\n\nconst ArrowContainer = styled(Grid)`\n  opacity: 0;\n  transition: opacity 0.3s ease;\n`;\n\nconst NewsCard = ({ imageUrl, title, description, newsLink, handleNext, handlePrevious }) => {\n  return (\n    <StyledCard className=\"customCard\">\n      <CardContent>\n        <Grid container spacing={5}>\n          <Grid item xs={12}>\n            <Grid container alignItems=\"center\" spacing={2}>\n              <ArrowContainer item md={1} className=\"arrows\">\n                <IconButton onClick={handlePrevious}>\n                  <ArrowBackIos style={{ color: 'white' }} />\n                </IconButton>\n              </ArrowContainer>\n              <Grid item md={4} xs={12}>\n                <img src={imageUrl} alt={title} style={{ width: '100%' }} />\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <Typography variant=\"h6\" style={{ marginBottom: '20px' }}>\n                  {title}\n                </Typography>\n                <Typography variant=\"body2\">{description}</Typography>\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => window.open(newsLink, '_blank', 'noopener,noreferrer')}\n                  style={{ padding: '0px 50px', height: '31px', marginTop: '30px' }} // Adjust padding as needed\n                >\n                  Read More\n                </Button>\n              </Grid>\n              <ArrowContainer item md={1} className=\"arrows\">\n                <IconButton onClick={handleNext}>\n                  <ArrowForwardIos style={{ color: 'white' }} />\n                </IconButton>\n              </ArrowContainer>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </StyledCard>\n  );\n};\n\nconst NewsSection = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const handleNext = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % newsData.length); // Loop back to the first news\n  };\n\n  const handlePrevious = () => {\n    setCurrentIndex((prevIndex) => (prevIndex === 0 ? newsData.length - 1 : prevIndex - 1));\n  };\n\n  const currentNews = newsData[currentIndex];\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <NewsCard\n          imageUrl={currentNews.imageUrl}\n          title={currentNews.title}\n          description={currentNews.description}\n          newsLink={currentNews.newsLink}\n          handleNext={handleNext}\n          handlePrevious={handlePrevious}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default NewsSection;","import React, { useRef, useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Tooltip } from '@material-ui/core';\n\nconst scrollAnimation = keyframes`\n  0% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(-100%);\n  }\n`;\n\nconst CarouselContainer = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  background: rgba(255, 255, 255, 0);\n  backdrop-filter: blur(10px);\n  position: relative;\n  margin-bottom: 30px;\n`;\n\nconst CarouselContent = styled.div`\n  display: inline-block;\n  padding: 10px 0;\n  animation: ${scrollAnimation} ${({ duration }) => duration * 100}s linear infinite;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst TweetContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 50px;\n  color: white; /* Set text to white */\n`;\n\nconst Avatar = styled.img`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n`;\n\n// Tweets data (hardcoded)\nconst tweets = [\n    { username: 'ElonMusk', text: 'This is a sample tweet about crypto markets.', avatar: 'https://randomuser.me/api/portraits/men/1.jpg' },\n    { username: 'CryptoUser', text: 'Breaking news! Crypto is going up fast! Stay tuned.', avatar: 'https://randomuser.me/api/portraits/men/3.jpg' },\n    { username: 'finance', text: 'CryptoVoice predicts that BTC will rise by 5%.', avatar: 'https://randomuser.me/api/portraits/women/3.jpg' },\n    { username: 'Binance', text: 'Here’s my analysis on ETH. Let’s see what happens next.', avatar: 'https://randomuser.me/api/portraits/women/2.jpg' },\n    { username: 'iLoveUPC', text: 'CryptoVoice TFM is awesome! Take a look at', avatar: 'https://randomuser.me/api/portraits/men/5.jpg' },\n    { username: 'CryptoUser', text: 'Breaking news! Crypto is going up fast! Stay tuned.', avatar: 'https://randomuser.me/api/portraits/men/2.jpg' },\n    { username: 'finance', text: 'CryptoVoice predicts that BTC will rise by 5%.', avatar: 'https://randomuser.me/api/portraits/women/1.jpg' },\n    { username: 'Binance', text: 'Here’s my analysis on ETH. Let’s see what happens next.', avatar: 'https://randomuser.me/api/portraits/women/2.jpg' }\n  ];\n\nconst Carousel = () => {\n  const carouselContentRef = useRef(null);\n  const [animationDuration, setAnimationDuration] = useState(45); // Initial duration\n\n  useEffect(() => {\n    if (carouselContentRef.current) {\n      const contentWidth = carouselContentRef.current.scrollWidth;\n      const viewportWidth = carouselContentRef.current.parentElement.offsetWidth;\n      const speedPerPixel = 0.05;\n      const calculatedDuration = (contentWidth / viewportWidth) * speedPerPixel;\n      setAnimationDuration(calculatedDuration);\n    }\n  }, [carouselContentRef]);\n\n  return (\n    <CarouselContainer>\n      <CarouselContent ref={carouselContentRef} duration={animationDuration}>\n        {[...tweets, ...tweets].map((tweet, index) => (\n          <Tooltip \n            key={index} \n            title={`Go to @${tweet.username} account on X (Twitter)`} \n            arrow\n            placement=\"top\"\n          >\n            <a \n              href={`https://twitter.com/${tweet.username}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              style={{ textDecoration: 'none', color: 'inherit' }} // Inherit white text color\n            >\n              <TweetContainer>\n                <Avatar src={tweet.avatar} alt={`${tweet.username} avatar`} />\n                <span>\n                  <strong>@{tweet.username}</strong>: {tweet.text.slice(0, 100)}...\n                </span>\n              </TweetContainer>\n            </a>\n          </Tooltip>\n        ))}\n      </CarouselContent>\n    </CarouselContainer>\n  );\n};\n\nexport default Carousel;","import React from 'react';\nimport { Card, CardContent, Typography, Grid, Box } from '@material-ui/core';\nimport btcImage from '../../../images/btc.png';\nimport ethImage from '../../../images/eth.png';\nimport adaImage from '../../../images/ada.png';\nimport linkImage from '../../../images/link.png';\nimport ltcImage from '../../../images/ltc.png';\nimport bnbImage from '../../../images/bnb.png';\nimport maticImage from '../../../images/matic.png';\nimport solImage from '../../../images/sol.png';\n\n// Sample prices and changes (you can replace these with real-time data)\nconst tokenPrices = {\n  BTC: { price: '$45,000', change: '-1.23%' },\n  ETH: { price: '$3,500', change: '+2.45%' },\n  ADA: { price: '$1.25', change: '+0.65%' },\n  LINK: { price: '$25', change: '-0.75%' },\n  LTC: { price: '$180', change: '+1.32%' },\n  BNB: { price: '$400', change: '+3.45%' },\n  MATIC: { price: '$1.50', change: '-2.00%' },\n  SOL: { price: '$150', change: '+4.12%' },\n};\n\n// Sample token images\nconst tokenImages = {\n  BTC: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n  ETH: ethImage,\n  ADA: adaImage,\n  LINK: linkImage,\n  LTC: 'https://cryptologos.cc/logos/litecoin-ltc-logo.png',\n  BNB: 'https://cryptologos.cc/logos/binance-coin-bnb-logo.png',\n  MATIC: maticImage,\n  SOL: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n};\n\nconst CurrentPricesCard = ({ favoriteTokens }) => {\n  return (\n    <Card className=\"customCard\">\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Favorite Tokens\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom style={{marginBottom: 30}}>\n          Last 24hs.\n        </Typography>\n\n        {/* Loop through favorite tokens */}\n        {favoriteTokens.length > 0 ? (\n          <Grid container spacing={5}>\n            {favoriteTokens.map((token) => {\n              const { price, change } = tokenPrices[token];\n              const isPositiveChange = change.startsWith('+');\n\n              return (\n                <Grid item key={token} xs={6} sm={6}>\n                  <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                      <img\n                        src={tokenImages[token]} // Display token image\n                        alt={token}\n                        style={{ width: 50, height: 50, marginRight: 10 }}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h6\">{token}</Typography>\n                        <Typography variant=\"body2\">{price}</Typography>\n                        <Typography\n                          variant=\"body2\"\n                          style={{\n                            color: isPositiveChange ? '#2AAE6F' : '#FF3333',\n                            fontWeight: 500,\n                            fontSize: '0.85rem', // Slightly smaller text size\n                          }}\n                        >\n                          {change}\n                        </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              );\n            })}\n          </Grid>\n        ) : (\n          <Typography variant=\"body2\">No favorite tokens selected.</Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CurrentPricesCard;","import React, { useState, useEffect } from 'react';\nimport {\n    Chart as ChartJS,\n    LineElement,\n    PointElement,\n    LinearScale,\n    CategoryScale,\n    Filler, \n    Title,\n    Tooltip,\n    Legend,\n    Interaction,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';  \nimport Papa from 'papaparse';\nimport CustomSwitch from '../../components/CustomSwitch';\nimport { Box, Typography } from '@material-ui/core';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport { display } from '@material-ui/system';\n\n// Register necessary components for Chart.js\nChartJS.register(LineElement, PointElement, LinearScale, CategoryScale, Filler, Title, Tooltip, Legend, zoomPlugin);\n\nconst tokenColors = {\n  BTC: '#F7931A',\n  ETH: '#627EEA',\n  ADA: '#0033AD',\n  LINK: '#2A5ADA',\n  LTC: '#345D9D',\n  BNB: '#F3BA2F',\n  MATIC: '#8247E5',\n  SOL: '#00FFA3',\n};\n\nconst GradientLineChart = ({ selectedToken }) => {\n  const [dataByToken, setDataByToken] = useState({});\n  const [groupByDay, setGroupByDay] = useState(true);\n  const theme = useTheme();\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md')); // Check if screen width is md or higher\n\n  const loadCSVData = () => {\n    fetch(`${process.env.PUBLIC_URL}/data.csv`)\n      .then((response) => response.text())\n      .then((csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const tokenMap = {};\n            results.data.forEach((row) => {\n              if (row.Token && row.Real_price && row.Prediction_Ensemble) {\n                const date = new Date(row.Fecha);\n                if (!tokenMap[row.Token]) tokenMap[row.Token] = [];\n                tokenMap[row.Token].push({\n                  date,\n                  realPrice: row.Real_price,\n                  predictionEnsemble: row.Prediction_Ensemble,\n                });\n              }\n            });\n            setDataByToken(tokenMap);\n          },\n        });\n      });\n  };\n\n  const groupByDayAndAverage = (data) => {\n    const groupedData = {};\n    data.forEach((entry) => {\n      const dateKey = entry.date.toISOString().split('T')[0];\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = { totalRealPrice: 0, totalPrediction: 0, count: 0 };\n      }\n      groupedData[dateKey].totalRealPrice += entry.realPrice;\n      groupedData[dateKey].totalPrediction += entry.predictionEnsemble;\n      groupedData[dateKey].count += 1;\n    });\n    return Object.entries(groupedData).map(([date, { totalRealPrice, totalPrediction, count }]) => ({\n      date: new Date(date),\n      avgRealPrice: totalRealPrice / count,\n      avgPredictionEnsemble: totalPrediction / count,\n    }));\n  };\n\n  useEffect(() => {\n    loadCSVData();\n  }, []);\n\n  const chartData = (canvas) => {\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(0, 0, 0, 300);\n    gradient.addColorStop(0, 'rgba(72, 177, 85, 0.3)'); // Reduced opacity from 0.6 to 0.3\n    gradient.addColorStop(1, 'rgba(72, 177, 85, 0)');\n\n    if (!selectedToken || !dataByToken[selectedToken]) return;\n\n    const dataToPlot = groupByDay ? groupByDayAndAverage(dataByToken[selectedToken]) : dataByToken[selectedToken];\n\n    return {\n      labels: dataToPlot.map(item => item.date),\n      datasets: [\n        {\n          label: 'Real Price',\n          data: dataToPlot.map(item => groupByDay ? item.avgRealPrice : item.realPrice),\n          fill: true,\n          backgroundColor: gradient,\n          borderColor: 'rgba(72, 177, 85, 0.8)', // Also made the line slightly more transparent\n          pointRadius: 0,\n          tension: 0.3\n        },\n        {\n          label: 'Prediction Price',\n          data: dataToPlot.map(item => groupByDay ? item.avgPredictionEnsemble : item.predictionEnsemble),\n          fill: false,\n          borderColor: tokenColors[selectedToken],\n          pointRadius: 0,\n          tension: 0.3\n        }\n      ]\n    };\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: true,\n    AspectRatio: 3,\n    scales: {\n      y: {\n        ticks: {\n            color: 'white',\n            callback: function(value) {\n              if (value >= 1000) {\n                return (value / 1000) + 'k';\n              }\n              else if (value <= 1){\n                return value.toFixed(2);\n              }\n              // Now formatting all numbers to 2 decimal places\n              return value;\n            },\n            font: { size: 14 },\n            padding: 20,\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        title: {\n          display: true,\n          text: 'Price (USD)',\n          font: { size: 16 },\n          color: 'white',\n        },\n      },\n      x: {\n        ticks: {\n          color: 'white',\n          font: { size: 14 },\n          maxTicksLimit: 6,\n          callback: function(value, index, values) {\n            const date = new Date(this.getLabelForValue(value));\n            return `${date.getDate()} ${date.toLocaleString('default', { month: 'short' })}`;\n          },\n          padding: 20,\n          maxRotation: 0,\n          minRotation: 0,\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        title: {\n          display: false,\n          text: 'Date',\n          font: { size: 16 },\n          color: 'white',\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        display: false,\n        position: 'bottom',\n        align: 'center',\n        labels: {\n          boxWidth: 20,\n          padding: 10,\n          color: 'white',\n        },\n        marginLeft: {\n          left: 150\n        },\n      },\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x',\n        },\n        zoom: {\n          enabled: true,\n          mode: 'x',\n          drag: true,\n        },\n      },\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  const optionsMobile = {\n    responsive: true,\n    maintainAspectRatio: true, // Dynamically adjust aspect ratio\n    aspectRatio: 2, // Wider for desktop, taller for mobile\n    scales: {\n      y: {\n        ticks: {\n          display: false\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        title: {\n          display: false,\n          text: 'Price (USD)',\n          font: { size: window.innerWidth > 600 ? 16 : 12 },\n          color: 'white',\n        },\n      },\n      x: {\n        ticks: {\n          display: false\n        },\n        grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        title: {\n          display: false,\n          text: 'Date',\n          font: { size: window.innerWidth > 600 ? 16 : 12 },\n          color: 'white',\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        display: window.innerWidth > 600, // Hide legend on mobile\n        position: 'bottom',\n        labels: {\n          boxWidth: 20,\n          padding: 10,\n          color: 'white',\n        },\n      },\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x',\n        },\n        zoom: {\n          enabled: true,\n          mode: 'x',\n          drag: true,\n        },\n      },\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false,\n    },\n  };\n\n  return (\n    <div style={{ height: isMdUp ? '400px': '200px', width: '100%' }}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: isMdUp ? 'row' : 'column',\n          alignItems: isMdUp ? 'center' : 'flex-start',\n          justifyContent: 'space-between',\n          marginBottom: '10px',\n        }}\n      >\n        <Typography variant=\"h6\" gutterBottom>\n          Real Price vs Prediction {isMdUp ? `Price (Token: ${selectedToken})` : `Price`}\n        </Typography>\n        <Box sx={{ marginTop: isMdUp ? 0 : '10px' }}> {/* Adds spacing when stacked */}\n          <CustomSwitch groupByDay={groupByDay} setGroupByDay={setGroupByDay} />\n        </Box>\n      </Box>\n      {selectedToken && dataByToken[selectedToken] ? (\n        <>\n          <Line data={chartData} options={isMdUp ? options : optionsMobile} />\n          <Box sx={{ display: 'flex', justifyContent: 'center', marginBottom: '10px' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', marginRight: 2 }}>\n              <Box\n                sx={{\n                  width: 16,\n                  height: 16,\n                  backgroundColor: 'rgba(72, 177, 85, 0.8)',\n                  borderRadius: '50%',\n                  marginRight: 5\n                }}\n              />\n              <Typography style={{ color: 'white', marginRight: 10 }}>Real Price</Typography>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Box\n                sx={{\n                  width: 16,\n                  height: 16,\n                  backgroundColor: tokenColors[selectedToken],\n                  borderRadius: '50%',\n                  marginRight: 1,\n                  marginRight: 10\n                }}\n              />\n              <Typography style={{ color: 'white' }}>Prediction Price</Typography>\n            </Box>\n          </Box>\n        </>\n      ) : (\n        <p>No data available</p>\n      )}\n    </div>\n  );\n};\n\nexport default GradientLineChart;","import React, { useState, useEffect } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\nimport CustomSwitch from '../../components/CustomSwitch';\nimport GradientLineChart from './GradientLineChart';\n\nconst tokenColors = {\n  BTC: '#F7931A',\n  ETH: '#627EEA',\n  ADA: '#0033AD',\n  LINK: '#2A5ADA',\n  LTC: '#345D9D',\n  BNB: '#F3BA2F',\n  MATIC: '#8247E5',\n  SOL: '#00FFA3',\n};\n\nconst LinePlotChart = ({ selectedToken }) => {\n {/* const [dataByToken, setDataByToken] = useState({});\n  const [groupByDay, setGroupByDay] = useState(true);\n\n  const loadCSVData = () => {\n    fetch(`${process.env.PUBLIC_URL}/data.csv`)\n      .then((response) => response.text())\n      .then((csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const tokenMap = {};\n            results.data.forEach((row) => {\n              if (row.Token && row.Real_price && row.Prediction_Ensemble) {\n                const date = new Date(row.Fecha);\n                if (!tokenMap[row.Token]) tokenMap[row.Token] = [];\n                tokenMap[row.Token].push({\n                  date,\n                  realPrice: row.Real_price,\n                  predictionEnsemble: row.Prediction_Ensemble,\n                });\n              }\n            });\n            setDataByToken(tokenMap);\n          },\n        });\n      });\n  };\n\n  const groupByDayAndAverage = (data) => {\n    const groupedData = {};\n    data.forEach((entry) => {\n      const dateKey = entry.date.toISOString().split('T')[0];\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = { totalRealPrice: 0, totalPrediction: 0, count: 0 };\n      }\n      groupedData[dateKey].totalRealPrice += entry.realPrice;\n      groupedData[dateKey].totalPrediction += entry.predictionEnsemble;\n      groupedData[dateKey].count += 1;\n    });\n    return Object.entries(groupedData).map(([date, { totalRealPrice, totalPrediction, count }]) => ({\n      date: new Date(date),\n      avgRealPrice: totalRealPrice / count,\n      avgPredictionEnsemble: totalPrediction / count,\n    }));\n  };\n\n  useEffect(() => {\n    loadCSVData();\n  }, []);*/}\n\n  return (\n    <Box sx={{ backgroundColor: 'transparent' }}>\n      <GradientLineChart selectedToken={selectedToken}/>\n      {/*<Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Real Price vs CryptoVoice Prediction (Token: {selectedToken})\n        </Typography>\n\n        <CustomSwitch groupByDay={groupByDay} setGroupByDay={setGroupByDay} />\n      </Box>\n      {selectedToken && dataByToken[selectedToken] && dataByToken[selectedToken].length > 0 ? (\n      <Plot\n        data={[\n          {\n            x: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.date)\n              : dataByToken[selectedToken].map((point) => point.date),\n            y: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.avgRealPrice)\n              : dataByToken[selectedToken].map((point) => point.realPrice),\n            mode: 'lines',\n            type: 'scatter',\n            line: groupByDay ? { color: 'white', width: 1, dash: 'dash' } : {color: 'white', width: 1},  // Real Price line in dashed style\n            name: groupByDay ? 'Day Average Price' : 'Real Price',\n            hoverlabel: {\n              font: {\n                color: 'white', // Font color for both parts\n              },\n              bgcolor: '#333', // Background for the name part (label)\n              bordercolor: 'rgba(255,255,255,0.2)', // Optional border color\n            },\n            hovertemplate: groupByDay ? \n              '<b>%{x|%b %d, %Y}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>'\n              :\n              '<b>%{x}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>',\n          },\n          {\n            x: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.date)\n              : dataByToken[selectedToken].map((point) => point.date),\n            y: groupByDay\n              ? groupByDayAndAverage(dataByToken[selectedToken]).map((point) => point.avgPredictionEnsemble)\n              : dataByToken[selectedToken].map((point) => point.predictionEnsemble),\n            mode: 'lines',\n            type: 'scatter',\n            line: { color: tokenColors[selectedToken], width: 2 },  // Prediction line\n            name: groupByDay ? 'Day Average Prediction' : 'Prediction',\n            hoverlabel: {\n              font: {\n                color: tokenColors[selectedToken], // Font color for both parts\n              },\n              bgcolor: '#333', // Background for the name part (label)\n              bordercolor: 'rgba(255,255,255,0.2)', // Optional border color\n            },\n            hovertemplate: groupByDay ? \n              '<b>%{x|%b %d, %Y}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>'\n              :\n              '<b>%{x}</b><br><span style=\"color:white\">$%{y}</span><extra></extra>',\n          }\n        ]}\n        layout={{\n          xaxis: {\n            title: 'Date',\n            type: 'date',\n            gridcolor: 'rgba(255, 255, 255, 0.1)',\n            titlefont: {\n              color: 'white',\n            },\n            tickfont: {\n              color: 'white',\n            },\n            showgrid: false,\n          },\n          yaxis: {\n            title: {\n              text: 'Price (USD)',\n              font: {\n                color: 'white',\n              },\n              standoff: 20,\n            },\n            gridcolor: 'rgba(255, 255, 255, 0.1)',\n            tickfont: {\n              color: 'white',\n            },\n            tickcolor: 'rgba(255, 255, 255, 0)',\n            ticklen: 10,\n            tickwidth: 0.1,\n          },\n          margin: { t: 30, r: 20, l: 60, b: 70 },\n          autosize: true,\n          height: 500,\n          legend: {\n            orientation: 'h',\n            x: 0.5,\n            xanchor: 'center',\n            y: -0.2,\n            yanchor: 'top',\n            font: { color: 'white' },\n          },\n          paper_bgcolor: 'rgba(255, 255, 255, 0)',\n          plot_bgcolor: 'rgba(255, 255, 255, 0)',\n        }}\n        useResizeHandler\n        style={{ width: '100%' }}\n        config={{\n          modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan2d', 'select2d', 'lasso2d'],\n          displaylogo: false,\n        }}\n      />\n      ) : (\n        <Typography>No data available for the selected token.</Typography>\n      )}*/}\n    </Box>\n  );\n};\n\nexport default LinePlotChart;","import React, { useState, useEffect } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\n\nconst CandlePlotChart = ({ selectedToken }) => {\n  const [dataByToken, setDataByToken] = useState({});\n\n  const loadCSVData = () => {\n    fetch(`${process.env.PUBLIC_URL}/data.csv`)\n      .then((response) => response.text())\n      .then((csvText) => {\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const tokenMap = {};\n            const cutoffDate = new Date('2024-08-15T23:59:59'); // Set the cutoff date to August 15, 2024\n  \n            // Iterate over rows and group them by token and day\n            results.data.forEach((row) => {\n              if (row.Token && row.Real_price && row.Fecha) {\n                const date = new Date(row.Fecha);\n  \n                // Only process data up to August 15\n                if (date <= cutoffDate) {\n                  const dayKey = date.toISOString().split('T')[0]; // Extract only the date part (YYYY-MM-DD)\n  \n                  // Initialize the map for the token if not done already\n                  if (!tokenMap[row.Token]) tokenMap[row.Token] = {};\n                  if (!tokenMap[row.Token][dayKey]) {\n                    tokenMap[row.Token][dayKey] = {\n                      open: row.Real_price,\n                      high: row.Real_price,\n                      low: row.Real_price,\n                      close: row.Real_price,\n                    };\n                  } else {\n                    // Update the high, low, and close prices for the day\n                    tokenMap[row.Token][dayKey].high = Math.max(tokenMap[row.Token][dayKey].high, row.Real_price);\n                    tokenMap[row.Token][dayKey].low = Math.min(tokenMap[row.Token][dayKey].low, row.Real_price);\n                    tokenMap[row.Token][dayKey].close = row.Real_price;  // Last price will be the close price\n                  }\n                }\n              }\n            });\n  \n            // Now flatten the grouped data into an array\n            const flattenedTokenMap = {};\n            Object.keys(tokenMap).forEach((token) => {\n              flattenedTokenMap[token] = Object.keys(tokenMap[token]).map((dayKey) => ({\n                date: new Date(dayKey),\n                open: tokenMap[token][dayKey].open,\n                high: tokenMap[token][dayKey].high,\n                low: tokenMap[token][dayKey].low,\n                close: tokenMap[token][dayKey].close,\n              }));\n            });\n  \n            setDataByToken(flattenedTokenMap);\n          },\n        });\n      });\n  };\n\n  useEffect(() => {\n    loadCSVData();\n  }, []);\n\n  return (\n    <Box sx={{ backgroundColor: 'transparent' }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Candlestick Chart (Token: {selectedToken})\n      </Typography>\n      {selectedToken && dataByToken[selectedToken] && dataByToken[selectedToken].length > 0 ? (\n        <Plot\n          data={[\n            {\n              x: dataByToken[selectedToken].map((point) => point.date),\n              open: dataByToken[selectedToken].map((point) => point.open),\n              high: dataByToken[selectedToken].map((point) => point.high),\n              low: dataByToken[selectedToken].map((point) => point.low),\n              close: dataByToken[selectedToken].map((point) => point.close),\n              type: 'candlestick',\n              name: selectedToken,\n              increasing: { line: { color: '#2AAE6F', width: 0.7 } },  // Set width for thinner candles\n              decreasing: { line: { color: '#FF3333', width: 0.7 } },  // Set width for thinner candles\n            },\n          ]}\n          layout={{\n            xaxis: {\n              title: 'Date',\n              type: 'date',\n              gridcolor: 'rgba(255, 255, 255, 0.1)',\n              titlefont: {\n                color: 'white',\n              },\n              tickfont: {\n                color: 'white',\n              },\n              showgrid: false,\n            },\n            yaxis: {\n              title: {\n                text: 'Price (USD)',\n                font: {\n                  color: 'white',\n                },\n                standoff: 20,\n              },\n              gridcolor: 'rgba(255, 255, 255, 0.1)',\n              tickfont: {\n                color: 'white',\n              },\n              tickcolor: 'rgba(255, 255, 255, 0)',\n              ticklen: 10,\n              tickwidth: 0.5,\n            },\n            margin: { t: 30, r: 20, l: 60, b: 70 },\n            autosize: true,\n            height: 500,\n            paper_bgcolor: 'rgba(255, 255, 255, 0)',\n            plot_bgcolor: 'rgba(255, 255, 255, 0)',\n          }}\n          useResizeHandler\n          style={{ width: '100%' }}\n          config={{\n            modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan2d', 'select2d', 'lasso2d'],\n            displaylogo: false,\n          }}\n        />\n      ) : (\n        <Typography>No data available for the selected token.</Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default CandlePlotChart;","import React from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport LinePlotChart from './LinePlotChart';\nimport CandlePlotChart from './CandlePlotChart';\n\nconst ChartsContainer = ({ selectedToken }) => {\n  return (\n    <React.Fragment>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <Card className=\"customCard\">\n            <CardContent>\n              <LinePlotChart selectedToken={selectedToken} />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default ChartsContainer;","import React from 'react';\nimport { Grid, Button, Typography } from '@material-ui/core';\nimport btcImage from '../../../images/btc.png';\nimport ethImage from '../../../images/eth.png';\nimport adaImage from '../../../images/ada.png';\nimport linkImage from '../../../images/link.png';\nimport ltcImage from '../../../images/ltc.png';\nimport bnbImage from '../../../images/bnb.png';\nimport maticImage from '../../../images/matic.png';\nimport solImage from '../../../images/sol.png';\n\n// Sample token images\nconst tokenImages = {\n  BTC: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n  ETH: ethImage,\n  ADA: adaImage,\n  LINK: linkImage,\n  LTC: 'https://cryptologos.cc/logos/litecoin-ltc-logo.png',\n  BNB: 'https://cryptologos.cc/logos/binance-coin-bnb-logo.png',\n  MATIC: maticImage,\n  SOL: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n};\n\nconst TokenToolbar = ({ selectedToken, onTokenChange }) => {\n  const availableTokens = Object.keys(tokenImages);\n\n  return (\n    <div>\n      <Grid container spacing={2} style={{ marginBottom: '20px', marginTop: '20px' }}>\n        {availableTokens.map((token) => (\n          <Grid item key={token}>\n            <Button\n              onClick={() => onTokenChange(token)}\n              className={selectedToken === token ? 'selectedToken' : ''}\n            >\n              <img\n                src={tokenImages[token]} // Use the token image for each button\n                alt={token}\n                style={{\n                  width: 20,\n                  height: 20,\n                  borderRadius: '50%', // Keep the image circular\n                }}\n              />\n              <Typography variant=\"caption\" align=\"center\" style={{ marginLeft: '10px', marginRight: '10px' }}>\n                {token}\n              </Typography>\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default TokenToolbar;","import React from 'react';\nimport { Grid, Typography, Box, LinearProgress, Tooltip } from '@material-ui/core';\nimport { Icon } from '@iconify/react';\nimport emoticonHappyOutline from '@iconify/icons-mdi/emoticon-happy-outline';\nimport sadFaceIcon from '@iconify-icons/mdi/emoticon-sad-outline';\nimport { Card, CardContent } from '@material-ui/core';\n\nconst FearGreedIndicator = ({ value }) => {\n  // Define the current state: \"Fear\" (0-50) or \"Greed\" (51-100)\n  const isFear = value <= 50;\n  \n  return (\n    <Card className=\"customCard\">\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n        Fear & Greed Index\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom style={{marginBottom: 30}}>\n          Powered by CryptoVoice classification model\n        </Typography>\n          <Grid container spacing={5}>\n                <Grid item  xs={12}>\n                  <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                      <Icon\n                        icon={isFear ? sadFaceIcon : emoticonHappyOutline}\n                        style={{ width: 58, height: 58, marginRight: 10, color: isFear ? '#FF3333' : '#2AAE6F' }}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h6\">Greed Mood</Typography>\n                        <Typography\n                          variant=\"body2\"\n                          style={{\n                            color: isFear ? '#FF3333' : '#2AAE6F',\n                            fontWeight: 500,\n                            fontSize: '0.85rem', // Slightly smaller text size\n                          }}\n                        >\n                          {value}%\n                        </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n          </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FearGreedIndicator;","import React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Custom Airbnb-style slider with white color\nconst WhiteSlider = withStyles({\n  root: {\n    color: '#ffffff',\n    height: 3,\n    padding: '13px 0',\n  },\n})(Slider);\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}°C`;\n}\n\nexport default function CustomSlider({ min, max }) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState([min, max / 2]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Typography variant=\"body2\" style={{marginRight: 10}}>{`$${value[0]}`}</Typography>\n        <WhiteSlider\n          value={value}\n          onChange={handleChange}\n          valueLabelDisplay=\"auto\"\n          aria-labelledby=\"range-slider\"\n          getAriaValueText={valuetext}\n          min={min}\n          max={max}\n          step={max < 10 ? 0.01 : 1}\n        />\n        <Typography variant=\"body2\" style={{marginLeft:10}}>{`$${value[1]}`}</Typography>\n      </Box>\n    </div>\n  );\n}","import React from 'react';\nimport { Card, CardContent, Typography, Box, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ethImage from '../../../images/eth.png';\n\n\nconst coins = [\n  {\n    symbol: 'BTC',\n    name: 'Bitcoin',\n    price: 67759.94,\n    change: 0.8,\n    logo: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png', \n  },\n  {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    price: 2492.0,\n    change: 0.15,\n    logo: ethImage,\n  },\n  {\n    symbol: 'BNB',\n    name: 'BNB',\n    price: 586.6,\n    change: -0.36,\n    logo: 'https://cryptologos.cc/logos/binance-coin-bnb-logo.png',\n  },\n  {\n    symbol: 'SOL',\n    name: 'Solana',\n    price: 176.97,\n    change: 2.64,\n    logo: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n      backgroundColor: '#1E2329',\n      color: 'white',\n      borderRadius: 12,\n      padding: theme.spacing(2),\n    },\n    header: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: theme.spacing(2),\n    },\n    coinRow: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: theme.spacing(4, 0), // Increase this value for more space between rows\n    },\n    coinInfo: {\n      display: 'flex',\n      alignItems: 'center',\n      flex: 2,\n    },\n    coinLogo: {\n      width: 24,\n      height: 24,\n      marginRight: theme.spacing(2),\n    },\n    coinName: {\n      fontSize: '1rem',\n      fontWeight: 500,\n    },\n    priceColumn: {\n      flex: 1,\n      textAlign: 'right',\n      fontWeight: 600,\n    },\n    changeColumn: {\n      flex: 1,\n      textAlign: 'right',\n      fontWeight: 600,\n    },\n    changePositive: {\n      color: '#0DCB81',\n    },\n    changeNegative: {\n      color: '#FF3333',\n    },\n  }));\n\nconst TopGainersCard = () => {\n  const classes = useStyles();\n\n  return (\n    <Card className='customCard'>\n      <CardContent>\n        <Box className={classes.header}>\n          <Typography variant=\"h6\">Top Gainers</Typography>\n        </Box>\n        {coins.map((coin) => (\n          <Box key={coin.symbol} className={classes.coinRow}>\n            <Box className={classes.coinInfo}>\n              <Avatar src={coin.logo} alt={coin.symbol} className={classes.coinLogo} />\n              <Typography className={classes.coinName}>\n                {coin.symbol}\n              </Typography>\n            </Box>\n            <Typography className={classes.priceColumn}>\n              ${coin.price.toLocaleString()}\n            </Typography>\n            <Typography\n              className={classes.changeColumn}\n              style={{ color: coin.change >= 0 ? '#2AAE6F' : '#FF3333' }}\n            >\n              {coin.change >= 0 ? '+' : ''}\n              {coin.change.toFixed(2)}%\n            </Typography>\n          </Box>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TopGainersCard;","import React, { useState, useEffect } from 'react';\nimport { Grid, Button, Dialog, DialogContent, IconButton, Box, Typography, Card, CardContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Star } from '@material-ui/icons'; \nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CurrentPricesCard from './CurrentPricesCard';\nimport ChartsContainer from './ChartsContainer';\nimport TokenToolbar from './TokenToolbar';\nimport FearGreedIndicator from './FearGreedIndicator';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport Papa from 'papaparse'; \nimport { rgba } from 'polished'; \nimport CustomSlider from './CustomSlider';\nimport TopGainersCard from './TopGainers';\nimport CandlePlotChart from './CandlePlotChart';\nimport FramerCard from '../FreeDashboard/FrameCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(1), \n  },\n  buttonContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2), \n    marginTop: theme.spacing(2), \n    justifyContent: 'center', \n  },\n  dialogContent: {\n    background: rgba(30, 35, 41, 0.1),\n    backdropFilter: 'blur(10px)', \n    padding: theme.spacing(6), \n    borderRadius: theme.spacing(1), \n    boxShadow: '0px 4px 12px rgba(0, 0, 0, 0.1)', \n  },\n  sliderBox: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n    marginTop: theme.spacing(6), \n  },\n  sliderIcon: {\n    color: theme.palette.primary.main,\n  },\n  dialogActionsBox: {\n    display: 'flex',\n    justifyContent: 'flex-end', \n    gap: theme.spacing(2), \n    marginTop: theme.spacing(4),\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const [selectedToken, setSelectedToken] = useState('BTC');\n  const [favoriteTokens, setFavoriteTokens] = useState(['BTC', 'ETH']);\n  const [openAlertModal, setOpenAlertModal] = useState(false);\n  const [lowerThreshold, setLowerThreshold] = useState(1000);\n  const [upperThreshold, setUpperThreshold] = useState(50000);\n  const [dataByToken, setDataByToken] = useState({});\n  const [availableTokens, setAvailableTokens] = useState([]);\n\n  const loadCSVData = () => {\n    fetch(`${process.env.PUBLIC_URL}/data.csv`)\n      .then(response => response.text())\n      .then(csvText => {\n        Papa.parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const tokenMap = {};\n            results.data.forEach(row => {\n              if (row.Token && row.Real_price && row.Prediction_Ensemble) {\n                if (!tokenMap[row.Token]) tokenMap[row.Token] = [];\n                tokenMap[row.Token].push({\n                  date: new Date(row.Fecha),\n                  realPrice: row.Real_price,\n                  predictionEnsemble: row.Prediction_Ensemble,\n                });\n              }\n            });\n            setDataByToken(tokenMap);\n            const tokens = Object.keys(tokenMap);\n            setAvailableTokens(tokens);\n          }\n        });\n      });\n  };\n\n  useEffect(() => {\n    loadCSVData();\n  }, []);\n\n  const downloadCSV = () => {\n    if (selectedToken && dataByToken[selectedToken]) {\n      const csv = Papa.unparse(dataByToken[selectedToken]);\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `${selectedToken}_data.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleFavoriteToggle = () => {\n    setFavoriteTokens(prev =>\n      prev.includes(selectedToken)\n        ? prev.filter(token => token !== selectedToken)\n        : [...prev, selectedToken]\n    );\n  };\n\n  const handleOpenAlertModal = () => {\n    setOpenAlertModal(true);\n  };\n\n  const handleCloseAlertModal = () => {\n    setOpenAlertModal(false);\n  };\n\n  const handleCreateAlert = () => {\n    handleCloseAlertModal();\n  };\n  const theme = useTheme();\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md')); // Check if screen width is md or higher\n\n\n  const tokenPrices = {\n    BTC: 71067,\n    ETH: 2617,\n    ADA: 0.3469,\n    LINK: 11,\n    LTC: 72,\n    BNB: 605,\n    MATIC: 0.64,\n    SOL: 179\n  };\n\n  function trimToTwoDecimals(num) {\n    if (num > 10){\n      return Math.floor(num); // Removes decimals if num > 10\n    }\n    return Math.floor(num * 100) / 100;\n  }\n\n  useEffect(() => {\n    if (selectedToken && tokenPrices[selectedToken] !== undefined) {\n      const price = tokenPrices[selectedToken];\n      const lower = trimToTwoDecimals(price * 0.5)\n      const upper = trimToTwoDecimals(price * 1.5)\n      setLowerThreshold(lower); // 50% below the current price\n      setUpperThreshold(upper); // 50% above the current price\n    }\n  }, [selectedToken]);\n\n  return (\n    <Grid container spacing={5} className={classes.root}>\n      <Grid item xs={12} md={8}>\n        <TokenToolbar\n          selectedToken={selectedToken}\n          onTokenChange={setSelectedToken}\n          favoriteTokens={favoriteTokens}\n          setFavoriteTokens={setFavoriteTokens}\n        />\n      </Grid>\n\n      <Grid item xs={12} md={4} className={classes.buttonContainer}>\n        <IconButton\n          onClick={handleFavoriteToggle}\n          aria-label=\"favorite\"\n          style={{\n            backgroundColor: favoriteTokens.includes(selectedToken) ? '#196CBF' : 'rgba(255, 255, 255, 0.1)',\n            padding: 5,\n            borderRadius: 20,\n            opacity: 0.9,\n            boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)',\n          }}\n        >\n          <Star style={{ color: '#ffffff', width: 26, height: 26 }} />\n        </IconButton>\n\n        {isMdUp ? (\n        // Full buttons with text on larger screens\n        <>\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            onClick={handleOpenAlertModal} \n            startIcon={<NotificationsIcon />}\n          >\n            Create Alert\n          </Button>\n\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            onClick={downloadCSV} \n            startIcon={<GetAppIcon />}\n          >\n            Download CSV Data\n          </Button>\n        </>\n      ) : (\n        // Icon-only buttons on mobile\n        <>\n          <IconButton \n            color=\"primary\" \n            onClick={handleOpenAlertModal}\n            style={{\n              backgroundColor:  'rgba(255, 255, 255, 0.1)',\n              padding: 5,\n              borderRadius: 20,\n              opacity: 0.9,\n              boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)',\n              marginRight: 20,\n              marginLeft: 20,\n            }}\n          >\n            <NotificationsIcon style={{ color: '#ffffff', width: 26, height: 26 }} />\n          </IconButton>\n\n          <IconButton \n            color=\"primary\" \n            onClick={downloadCSV}\n            style={{\n              backgroundColor:  'rgba(255, 255, 255, 0.1)',\n              padding: 5,\n              borderRadius: 20,\n              opacity: 0.9,\n              boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)',\n              \n            }}\n          >\n            <GetAppIcon style={{ color: '#ffffff', width: 26, height: 26 }} />\n          </IconButton>\n        </>\n      )}\n      </Grid>\n\n      <Grid container spacing={5} className={classes.root}>\n        {/* Left Side - Chart */}\n        <Grid item xs={12} md={8} style={{ display: 'flex', flexDirection: 'column' }}>\n          <Box style={{ height: '100%' }}>\n            <ChartsContainer selectedToken={selectedToken} />\n          </Box>\n        </Grid>\n\n        {/* Right Side - Info Cards */}\n        <Grid \n          item \n          xs={12} \n          md={4} \n          style={isMdUp ? { display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%' } : {}}\n        > \n          <Box style={isMdUp ? {flexGrow: 1 } : {marginBottom: 20}}>\n            <CurrentPricesCard favoriteTokens={favoriteTokens}/>\n          </Box>\n          <Box>\n            <FearGreedIndicator value={65} />\n          </Box>\n        </Grid>\n      </Grid>\n      \n      <Grid item xs={12} md={8} style={{marginTop: 20}}>\n        <Card className=\"customCard\">\n          <CardContent>\n          <CandlePlotChart selectedToken={selectedToken} />\n          </CardContent>\n        </Card>\n      </Grid>\n      <Grid item xs={12} md={4} style={{marginTop: 20}}>\n        <Box>\n          <TopGainersCard/>\n        </Box>\n      </Grid>\n      <FramerCard/>\n\n      <Dialog open={openAlertModal} onClose={handleCloseAlertModal} fullWidth maxWidth=\"sm\" padding={10}\n      PaperProps={{\n        style: {\n          borderRadius: 20,\n          border: '1px solid rgba(255, 255, 255, 0.3)',\n          maxWidth: 350,\n          background: rgba(30, 35, 41, 0.1),\n          backdropFilter: 'blur(10px)',\n        },\n      }}>\n        <DialogContent className={classes.dialogContent}>\n          <Typography variant=\"h6\" gutterBottom>{selectedToken} Price Alert</Typography>\n          <Typography variant=\"body2\" gutterBottom>Set your price thresholds</Typography>\n\n          <Box className={classes.sliderBox}>\n            <CustomSlider min={lowerThreshold} max={upperThreshold} />\n          </Box>\n\n          <Box className={classes.dialogActionsBox} style={{ display: 'flex', justifyContent: 'center' }}>\n            <Button onClick={handleCloseAlertModal} color=\"primary\" variant=\"contained\">Cancel</Button>\n            <Button onClick={handleCreateAlert} color=\"primary\" variant=\"outlined\">Create Alert</Button>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </Grid>\n  );\n};\n\nexport default Dashboard;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../../../App.css';\nimport NewsSection from './NewsSection';\nimport Carousel from './Carousel';\n\n// Material UI\nimport {\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\n// Project files\nimport { copyJSONToClipboard } from '../../../utils/copyToClipboard';\nimport AccessDenied from '../../../components/AccessDenied';\n\n// Import actions from Redux slice\nimport {\n  clearAllFilters,\n  setSearchDisable} from '../../../redux/store/dbFilterSlice';\nimport Dashboard from './Dashboard';\nimport { margin } from 'polished';\n\nfunction Database() {\n  const dispatch = useDispatch();\n\n  // Access Redux state\n  const {\n    appliedFilters,\n    accessDenied,\n  } = useSelector((state) => state.filters);\n\n  // Local state variables\n  const [resultCount, setResultCount] = useState('');\n  const [evaluationsData, setEvaluationsData] = useState({});\n  const [subjectsData, setSubjectsData] = useState({});\n  const [resultsLoading, setResultsLoading] = useState(false);\n  const [searchFilters, setSearchFilters] = useState({})\n\n  const handleSearch = () => {\n    dispatch(setSearchDisable(true));\n\n    // Ensure appliedFilters has evaluation_filters and subject_filters\n    const jsonAppliedFilters = {\n      evaluation_filters: appliedFilters.evaluations_filters || {},\n      subject_filters: appliedFilters.subjects_filters || {},\n    };\n    setSearchFilters(jsonAppliedFilters);\n    setResultsLoading(true);\n    window.scroll(0, document.body.scrollHeight/3);\n\n  };\n\n  const handleClearFilters = () => {\n    dispatch(clearAllFilters());\n    dispatch(setSearchDisable(true));\n  };\n\n  const handleCopyFilters = () => {\n    copyJSONToClipboard(searchFilters);\n  };\n\n  return !accessDenied ? (\n    <Grid container spacing={3}>\n      <Typography variant=\"h1\" gutterBottom>\n        CryptoVoice Dashboard\n      </Typography>\n      <Dashboard evaluations={evaluationsData} subjects={subjectsData} handleCopyFilters={handleCopyFilters}/>\n      <Typography variant=\"h1\" gutterBottom style={{marginTop: \"70px\", marginBottom: \"40px\"}}>\n        Crypto News Spotlight\n      </Typography>\n      <Carousel />\n      <NewsSection />\n\n    </Grid>\n  ) : (\n    <AccessDenied />\n  );\n}\n\nexport default Database;"],"sourceRoot":""}